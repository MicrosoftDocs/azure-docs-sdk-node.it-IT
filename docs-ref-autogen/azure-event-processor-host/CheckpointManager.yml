### YamlMime:UniversalReference
ms.openlocfilehash: a54a8d025a067a5a1f8e278ccbb96a5c55d02684
ms.sourcegitcommit: 094b6aa16c2ee9aa1418d36ce033f1d99151d913
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 09/18/2018
ms.locfileid: "45957225"
items:
- uid: azure-event-processor-host.CheckpointManager
  name: CheckpointManager
  fullName: CheckpointManager
  children:
  - azure-event-processor-host.CheckpointManager.checkpointStoreExists
  - azure-event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists
  - azure-event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists
  - azure-event-processor-host.CheckpointManager.deleteCheckpoint
  - azure-event-processor-host.CheckpointManager.deleteCheckpointStore
  - azure-event-processor-host.CheckpointManager.getCheckpoint
  - azure-event-processor-host.CheckpointManager.updateCheckpoint
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.checkpointStoreExists
  name: checkpointStoreExists
  children: []
  type: method
  langs:
  - typeScript
  summary: Esiste nell'archivio del punto di controllo?
  syntax:
    content: function checkpointStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists
  name: createAllCheckpointsIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Crea i titolari dei checkpoint per le partizioni specificate. Non esegue alcuna operazione per eventuali checkpoint titolari già esistenti.

    La semantica di questo oggetto è complessa poiché è possibile usare lo stesso archivio per i lease e i checkpoint (l'implementazione di archiviazione di Azure eseguita) e deve essere presente un lease per ogni partizione ma non è necessario disporre di un checkpoint per una partizione.

    È uno scenario valido a non usare mai i checkpoint, pertanto è importante per l'archivio distinguere tra la creazione di structure(s) che conterrà un checkpoint e creare effettivamente un checkpoint (archiviazione di una coppia di numeri di sequenza/offset della struttura).
  syntax:
    content: 'function createAllCheckpointsIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: Elenco di partizioni per i titolari dei checkpoint per creare.
    return:
      type:
      - Promise<void>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists
  name: createCheckpointStoreIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: Creare l'archivio di checkpoint, se non esiste. Non esegue alcuna operazione se esistente.
  syntax:
    content: function createCheckpointStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.deleteCheckpoint
  name: deleteCheckpoint
  children: []
  type: method
  langs:
  - typeScript
  summary: Eliminare il checkpoint archiviato per la partizione specificata. Se è presente alcun checkpoint archiviato per la partizione specifica, che viene considerata come completata. L'eliminazione del checkpoint titolare è consentito, ma non richiesto; l'implementazione è libera di eseguire qualunque sia il più pratico.
  syntax:
    content: 'function deleteCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: PartitionId per eliminare il checkpoint dallo store.
    return:
      type:
      - Promise<void>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.deleteCheckpointStore
  name: deleteCheckpointStore
  children: []
  type: method
  langs:
  - typeScript
  summary: Elimina l'archivio di checkpoint.
  syntax:
    content: function deleteCheckpointStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.getCheckpoint
  name: getCheckpoint
  children: []
  type: method
  langs:
  - typeScript
  summary: Ottiene le informazioni di checkpoint associate con la partizione specificata. Potrebbe restituire indefinito se non è stato creato alcun checkpoint per la partizione.
  syntax:
    content: 'function getCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: PartitionId per ottenere le informazioni di checkpoint per.
    return:
      type:
      - Promise<azure-event-processor-host.CheckpointInfo | undefined>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.updateCheckpoint
  name: updateCheckpoint
  children: []
  type: method
  langs:
  - typeScript
  summary: Aggiornare il checkpoint nell'archivio con l'offset/sequenceNumber nel checkpoint specificato.
  syntax:
    content: 'function updateCheckpoint(lease: CompleteLease, checkpoint: CheckpointInfo)'
    parameters:
    - id: lease
      type:
      - azure-event-processor-host.CompleteLease
      description: Informazioni sulle partizioni in base al quale eseguire un checkpoint.
    - id: checkpoint
      type:
      - azure-event-processor-host.CheckpointInfo
      description: offset/sequeceNumber per aggiornare l'archivio con
    return:
      type:
      - Promise<void>
  package: azure-event-processor-host
references:
- uid: Promise<azure-event-processor-host.CheckpointInfo | undefined>
  name: CheckpointInfo | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: azure-event-processor-host.CheckpointInfo
  - name: " | undefined>"
    fullName: " | undefined>"
- uid: azure-event-processor-host.CompleteLease
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: azure-event-processor-host.CompleteLease
- uid: azure-event-processor-host.CheckpointInfo
  name: CheckpointInfo
  spec.typeScript:
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: azure-event-processor-host.CheckpointInfo
