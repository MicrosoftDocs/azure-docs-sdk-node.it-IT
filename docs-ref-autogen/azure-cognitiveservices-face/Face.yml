### YamlMime:UniversalReference
ms.openlocfilehash: 470cfbc0b4033164719779f553927946a2544cde
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 08/22/2018
ms.locfileid: "41692610"
items:
- uid: azure-cognitiveservices-face.Face
  name: Face
  fullName: Face
  children:
  - azure-cognitiveservices-face.Face.detect
  - azure-cognitiveservices-face.Face.detect_1
  - azure-cognitiveservices-face.Face.detect_2
  - azure-cognitiveservices-face.Face.detectInStream_1
  - azure-cognitiveservices-face.Face.detectInStream_2
  - azure-cognitiveservices-face.Face.detectInStream
  - azure-cognitiveservices-face.Face.detectInStreamWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.detectWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.findSimilar
  - azure-cognitiveservices-face.Face.findSimilar_1
  - azure-cognitiveservices-face.Face.findSimilar_2
  - azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.group
  - azure-cognitiveservices-face.Face.group_1
  - azure-cognitiveservices-face.Face.group_2
  - azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.identify_1
  - azure-cognitiveservices-face.Face.identify_2
  - azure-cognitiveservices-face.Face.identify
  - azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verify
  - azure-cognitiveservices-face.Face.verify_1
  - azure-cognitiveservices-face.Face.verify_2
  - azure-cognitiveservices-face.Face.verifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup_1
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup_2
  - azure-cognitiveservices-face.Face.verifyWithPersonGroupWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-101">Rileva i visi in un'immagine e restituisce le posizioni viso e, facoltativamente con faceIds, punti di riferimento e gli attributi.</span><span class="sxs-lookup"><span data-stu-id="01e9e-101">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: "\n"
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect_1
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-102">Rileva i visi in un'immagine e restituisce le posizioni viso e, facoltativamente con faceIds, punti di riferimento e gli attributi.</span><span class="sxs-lookup"><span data-stu-id="01e9e-102">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect_2
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-103">Rileva i visi in un'immagine e restituisce le posizioni viso e, facoltativamente con faceIds, punti di riferimento e gli attributi.</span><span class="sxs-lookup"><span data-stu-id="01e9e-103">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream_1
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-104">Rileva i visi in un'immagine e restituisce le posizioni viso e, facoltativamente con faceIds, punti di riferimento e gli attributi.</span><span class="sxs-lookup"><span data-stu-id="01e9e-104">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream_2
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-105">Rileva i visi in un'immagine e restituisce le posizioni viso e, facoltativamente con faceIds, punti di riferimento e gli attributi.</span><span class="sxs-lookup"><span data-stu-id="01e9e-105">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-106">Rileva i visi in un'immagine e restituisce le posizioni viso e, facoltativamente con faceIds, punti di riferimento e gli attributi.</span><span class="sxs-lookup"><span data-stu-id="01e9e-106">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="01e9e-107">Un flusso dell'immagine.</span><span class="sxs-lookup"><span data-stu-id="01e9e-107">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStreamWithHttpOperationResponse
  name: detectInStreamWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-108">Rileva i visi in un'immagine e restituisce le posizioni viso e, facoltativamente con faceIds, punti di riferimento e gli attributi.</span><span class="sxs-lookup"><span data-stu-id="01e9e-108">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStreamWithHttpOperationResponse(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="01e9e-109">Un flusso dell'immagine.</span><span class="sxs-lookup"><span data-stu-id="01e9e-109">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithHttpOperationResponse
  name: detectWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-110">Rileva i visi in un'immagine e restituisce le posizioni viso e, facoltativamente con faceIds, punti di riferimento e gli attributi.</span><span class="sxs-lookup"><span data-stu-id="01e9e-110">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithHttpOperationResponse(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: "\n"
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-111">Dato faceId del viso, cercare i visi somiglianti da una matrice faceId o un faceListId.</span><span class="sxs-lookup"><span data-stu-id="01e9e-111">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-112">FaceId della faccia di query.</span><span class="sxs-lookup"><span data-stu-id="01e9e-112">FaceId of the query face.</span></span> <span data-ttu-id="01e9e-113">Utente deve chiamare viso: rilevare prima per ottenere un faceId valido.</span><span class="sxs-lookup"><span data-stu-id="01e9e-113">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="01e9e-114">Si noti che questo faceId non è persistente e scadrà tra 24 ore dopo la chiamata di rilevamento</span><span class="sxs-lookup"><span data-stu-id="01e9e-114">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_1
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-115">Dato faceId del viso, cercare i visi somiglianti da una matrice faceId o un faceListId.</span><span class="sxs-lookup"><span data-stu-id="01e9e-115">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFaceResult[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_2
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-116">Dato faceId del viso, cercare i visi somiglianti da una matrice faceId o un faceListId.</span><span class="sxs-lookup"><span data-stu-id="01e9e-116">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options: Object, callback: ServiceCallback<SimilarFaceResult[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  name: findSimilarWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-117">Dato faceId del viso, cercare i visi somiglianti da una matrice faceId o un faceListId.</span><span class="sxs-lookup"><span data-stu-id="01e9e-117">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilarWithHttpOperationResponse(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-118">FaceId della faccia di query.</span><span class="sxs-lookup"><span data-stu-id="01e9e-118">FaceId of the query face.</span></span> <span data-ttu-id="01e9e-119">Utente deve chiamare viso: rilevare prima per ottenere un faceId valido.</span><span class="sxs-lookup"><span data-stu-id="01e9e-119">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="01e9e-120">Si noti che questo faceId non è persistente e scadrà tra 24 ore dopo la chiamata di rilevamento</span><span class="sxs-lookup"><span data-stu-id="01e9e-120">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFaceResult[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-121">Dividere candidato visi in gruppi basati sulla somiglianza viso.</span><span class="sxs-lookup"><span data-stu-id="01e9e-121">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="01e9e-122">Matrice di faceId candidato creato da viso: rilevare.</span><span class="sxs-lookup"><span data-stu-id="01e9e-122">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="01e9e-123">Il valore massimo è 1000 visi</span><span class="sxs-lookup"><span data-stu-id="01e9e-123">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_1
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-124">Dividere candidato visi in gruppi basati sulla somiglianza viso.</span><span class="sxs-lookup"><span data-stu-id="01e9e-124">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResponse>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResponse>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_2
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-125">Dividere candidato visi in gruppi basati sulla somiglianza viso.</span><span class="sxs-lookup"><span data-stu-id="01e9e-125">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options: Object, callback: ServiceCallback<GroupResponse>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResponse>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  name: groupWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-126">Dividere candidato visi in gruppi basati sulla somiglianza viso.</span><span class="sxs-lookup"><span data-stu-id="01e9e-126">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function groupWithHttpOperationResponse(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="01e9e-127">Matrice di faceId candidato creato da viso: rilevare.</span><span class="sxs-lookup"><span data-stu-id="01e9e-127">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="01e9e-128">Il valore massimo è 1000 visi</span><span class="sxs-lookup"><span data-stu-id="01e9e-128">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResponse>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_1
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-129">Identificare visi sconosciuti da un gruppo di persone.</span><span class="sxs-lookup"><span data-stu-id="01e9e-129">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], callback: ServiceCallback<IdentifyResultItem[]>)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: ''
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_2
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-130">Identificare visi sconosciuti da un gruppo di persone.</span><span class="sxs-lookup"><span data-stu-id="01e9e-130">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], options: Object, callback: ServiceCallback<IdentifyResultItem[]>)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: ''
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-131">Identificare visi sconosciuti da un gruppo di persone.</span><span class="sxs-lookup"><span data-stu-id="01e9e-131">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], options?: Object)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-132">personGroupId del gruppo di persona di destinazione, creato da PersonGroups.Create</span><span class="sxs-lookup"><span data-stu-id="01e9e-132">personGroupId of the target person group, created by PersonGroups.Create</span></span>
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="01e9e-133">Matrice di faceId candidato creato da viso: rilevare.</span><span class="sxs-lookup"><span data-stu-id="01e9e-133">Array of candidate faceId created by Face - Detect.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  name: identifyWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-134">Identificare visi sconosciuti da un gruppo di persone.</span><span class="sxs-lookup"><span data-stu-id="01e9e-134">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identifyWithHttpOperationResponse(personGroupId: string, faceIds: string[], options?: Object)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-135">personGroupId del gruppo di persona di destinazione, creato da PersonGroups.Create</span><span class="sxs-lookup"><span data-stu-id="01e9e-135">personGroupId of the target person group, created by PersonGroups.Create</span></span>
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="01e9e-136">Matrice di faceId candidato creato da viso: rilevare.</span><span class="sxs-lookup"><span data-stu-id="01e9e-136">Array of candidate faceId created by Face - Detect.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResultItem[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-137">Verificare che due visi appartengano a un utente stesso o se un volto appartiene a una persona.</span><span class="sxs-lookup"><span data-stu-id="01e9e-137">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-138">faceId del volto prima, proviene da viso: rilevare</span><span class="sxs-lookup"><span data-stu-id="01e9e-138">faceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-139">faceId della faccia di secondo, proviene da viso: rilevare</span><span class="sxs-lookup"><span data-stu-id="01e9e-139">faceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify_1
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-140">Verificare che due visi appartengano a un utente stesso o se un volto appartiene a una persona.</span><span class="sxs-lookup"><span data-stu-id="01e9e-140">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify_2
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-141">Verificare che due visi appartengano a un utente stesso o se un volto appartiene a una persona.</span><span class="sxs-lookup"><span data-stu-id="01e9e-141">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithHttpOperationResponse
  name: verifyWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-142">Verificare che due visi appartengano a un utente stesso o se un volto appartiene a una persona.</span><span class="sxs-lookup"><span data-stu-id="01e9e-142">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyWithHttpOperationResponse(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-143">faceId del volto prima, proviene da viso: rilevare</span><span class="sxs-lookup"><span data-stu-id="01e9e-143">faceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-144">faceId della faccia di secondo, proviene da viso: rilevare</span><span class="sxs-lookup"><span data-stu-id="01e9e-144">faceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-145">Verificare se due visi appartengono a una stessa persona.</span><span class="sxs-lookup"><span data-stu-id="01e9e-145">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="01e9e-146">Confronta un viso Id con un Id persona</span><span class="sxs-lookup"><span data-stu-id="01e9e-146">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-147">faceId il viso, proviene da viso: rilevare</span><span class="sxs-lookup"><span data-stu-id="01e9e-147">faceId the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-148">Specificare una determinata persona in un gruppo di persone.</span><span class="sxs-lookup"><span data-stu-id="01e9e-148">Specify a certain person in a person group.</span></span>

        <span data-ttu-id="01e9e-149">personId viene creato in Persons.Create.</span><span class="sxs-lookup"><span data-stu-id="01e9e-149">personId is created in Persons.Create.</span></span>
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-150">Usando personGroupId e personId esistenti per una specifica persona il caricamento rapido.</span><span class="sxs-lookup"><span data-stu-id="01e9e-150">Using existing personGroupId and personId for fast loading a specified person.</span></span> <span data-ttu-id="01e9e-151">personGroupId viene creato in Groups.Create persona.</span><span class="sxs-lookup"><span data-stu-id="01e9e-151">personGroupId is created in Person Groups.Create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup_1
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-152">Verificare se due visi appartengono a una stessa persona.</span><span class="sxs-lookup"><span data-stu-id="01e9e-152">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="01e9e-153">Confronta un viso Id con un Id persona</span><span class="sxs-lookup"><span data-stu-id="01e9e-153">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: personGroupId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup_2
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-154">Verificare se due visi appartengono a una stessa persona.</span><span class="sxs-lookup"><span data-stu-id="01e9e-154">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="01e9e-155">Confronta un viso Id con un Id persona</span><span class="sxs-lookup"><span data-stu-id="01e9e-155">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: personGroupId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroupWithHttpOperationResponse
  name: verifyWithPersonGroupWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01e9e-156">Verificare se due visi appartengono a una stessa persona.</span><span class="sxs-lookup"><span data-stu-id="01e9e-156">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="01e9e-157">Confronta un viso Id con un Id persona</span><span class="sxs-lookup"><span data-stu-id="01e9e-157">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroupWithHttpOperationResponse(faceId: string, personId: string, personGroupId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-158">faceId il viso, proviene da viso: rilevare</span><span class="sxs-lookup"><span data-stu-id="01e9e-158">faceId the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-159">Specificare una determinata persona in un gruppo di persone.</span><span class="sxs-lookup"><span data-stu-id="01e9e-159">Specify a certain person in a person group.</span></span>

        <span data-ttu-id="01e9e-160">personId viene creato in Persons.Create.</span><span class="sxs-lookup"><span data-stu-id="01e9e-160">personId is created in Persons.Create.</span></span>
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="01e9e-161">Usando personGroupId e personId esistenti per una specifica persona il caricamento rapido.</span><span class="sxs-lookup"><span data-stu-id="01e9e-161">Using existing personGroupId and personId for fast loading a specified person.</span></span> <span data-ttu-id="01e9e-162">personGroupId viene creato in Groups.Create persona.</span><span class="sxs-lookup"><span data-stu-id="01e9e-162">personGroupId is created in Person Groups.Create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
references:
- uid: Promise<azure-cognitiveservices-face.DetectedFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFaceResult[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.GroupResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.GroupResponse>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResponse>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResultItem[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.VerifyResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.VerifyResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>>'
    fullName: '>>'
