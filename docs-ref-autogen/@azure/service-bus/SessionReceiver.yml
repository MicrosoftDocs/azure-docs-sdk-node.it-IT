### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    fullName: SessionReceiver
    children:
      - '@azure/service-bus.SessionReceiver.close'
      - '@azure/service-bus.SessionReceiver.getMessageIterator'
      - '@azure/service-bus.SessionReceiver.getState'
      - '@azure/service-bus.SessionReceiver.isClosed'
      - '@azure/service-bus.SessionReceiver.isReceivingMessages'
      - '@azure/service-bus.SessionReceiver.peek'
      - '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
      - '@azure/service-bus.SessionReceiver.receiveMessages'
      - '@azure/service-bus.SessionReceiver.receiveMode'
      - '@azure/service-bus.SessionReceiver.registerMessageHandler'
      - '@azure/service-bus.SessionReceiver.renewSessionLock'
      - '@azure/service-bus.SessionReceiver.sessionId'
      - '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
      - '@azure/service-bus.SessionReceiver.setState'
    langs:
      - typeScript
    type: class
    summary: |-
      La classe SessionReceiver può essere utilizzata per ricevere messaggi da una sessione abilitata coda o sottoscrizione in un batch o registrando i gestori.
      Usare il `createReceiver` funzione nel QueueClient o per creare un'istanza di un SessionReceiver SubscriptionClient.
      La classe SessionReceiver è un'astrazione sul collegamento ricevitore AMQP sottostante.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Chiude il collegamento ricevitore AMQP sottostante.
      Una volta chiusa, il ricevitore non è utilizzabile per eventuali altre operazioni.
      Usare il `createReceiver` nel QueueClient o SubscriptionClient per creare un'istanza di un nuovo ricevitore (funzione)
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Ottiene un iteratore asincrono i messaggi dal destinatario.
      Genera un errore se è presente un'altra operazione di ricezione in corso sul ricevitore di stesso. Se non si è certi se è presente un'altra esecuzione di operazione di ricezione, controllare il `isReceivingMessages` proprietà sul ricevitore.

      Se l'iteratore non è in grado di recuperare un nuovo messaggio in un minuto, `undefined` verrà restituito
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getState'
    name: getState()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ottiene lo stato della sessione. Per altre informazioni sugli stati di sessione, vedere [lo stato della sessione](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: function getState()
      parameters: []
      return:
        type:
          - Promise<any>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: Restituisce `true` se il ricevitore viene chiuso. Questa situazione può verificarsi uno perché il ricevitore stesso è stato chiuso o creare il client che si è stata chiusa.
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Indica se il ricevitore è attualmente ricevono i messaggi o non.
      Quando viene restituito true, nuove `registerMessageHandler()` o `receiveMessages()` non è possibile effettuare chiamate.
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Recupera il successivo batch di messaggi attivi (incluso con rinviata ma non i messaggi non recapitabile) nella sessione corrente.
      - La prima chiamata a `peek()` recupera il primo messaggio attivo. Ogni chiamata successiva viene recuperato il messaggio successivo.
      - A differenza di una `received` messaggio `peeked` messaggio è una versione di sola lettura del messaggio.
      Non può essere `Completed/Abandoned/Deferred/Deadlettered`. Non è possibile rinnovare il blocco su di esso.
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: Il numero massimo di messaggi da recuperare. Il valore predefinito `1`.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Visualizza il numero desiderato di messaggi attivi (incluso con rinviata ma non i messaggi non recapitabile) dal numero di sequenza specificato nella sessione corrente.
      - A differenza di una `received` messaggio `peeked` messaggio è una versione di sola lettura del messaggio.
      Non può essere `Completed/Abandoned/Deferred/Deadlettered`. Non è possibile rinnovare il blocco su di esso.
    syntax:
      content: 'function peekBySequenceNumber(fromSequenceNumber: Long, maxMessageCount?: undefined | number)'
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: Il numero di sequenza da cui leggere il messaggio.
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: Restituisce una promessa che viene risolta in un messaggio rinviato identificato dal determinato `sequenceNumber`.
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: Il numero di sequenza del messaggio che deve essere ricevuto.
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Restituisce una promessa che viene risolta in una matrice dei messaggi rinviati identificato da dato `sequenceNumbers`.
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: Matrice di numeri di sequenza per i messaggi che devono essere ricevuti.
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Restituisce una promessa che viene risolta in una matrice di messaggi basata su conteggio e timeout su un ricevitore di AMQP collegano da una coda/sottoscrizione.
      Genera un errore se è presente un'altra operazione di ricezione in corso sul ricevitore di stesso. Se non si è certi se è presente un'altra esecuzione di operazione di ricezione, controllare il `isReceivingMessages` proprietà sul ricevitore.
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: Il numero massimo di messaggi per la ricezione da coda/sottoscrizione.
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: |-
            Il valore massimo tempo di attesa in secondi per il quale il ricevitore deve attendere di ricevere il primo messaggio. Se nessun messaggio viene ricevuto a questo punto, il suggerimento restituito viene risolto in una matrice vuota.
            - **Default**: `60` secondi.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: Denota receiveMode di questo ricevente.
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, SessionMessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Registra i gestori per gestire il flusso dei messaggi in ingresso tramite un collegamento ricevitore AMQP da una coda/sottoscrizione.
      Per arrestare la ricezione di messaggi, chiamare `close()` sul SessionReceiver.
      Genera un errore se è presente un'altra operazione di ricezione in corso sul ricevitore di stesso. Se non si è certi se è presente un'altra esecuzione di operazione di ricezione, controllare il `isReceivingMessages` proprietà sul ricevitore.
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: SessionMessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: Gestore per l'elaborazione di ogni messaggio in arrivo.
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: Gestore per eventuali errori che si verifica durante la ricezione o l'elaborazione dei messaggi.
        - id: options
          type:
            - '@azure/service-bus.SessionMessageHandlerOptions'
          description: |
            Opzioni per controllare se i messaggi devono essere completati automaticamente o se il blocco sulla sessione deve essere rinnovato automaticamente. È possibile controllare il numero massimo di messaggi che devono essere elaborati contemporaneamente. È anche possibile fornire un timeout in secondi per indicare la quantità di tempo di attesa per un nuovo messaggio prima di chiudere il ricevitore.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.renewSessionLock'
    name: renewSessionLock()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Rinnova il blocco sulla sessione per la durata come specificato durante la creazione della coda/sottoscrizione.
      - Controllare il `sessionLockedUntilUtc` proprietà il SessionReceiver per il periodo di tempo quando scade.
      - Quando la sessione scade
          - Nessun messaggio più può essere ricevuto tramite questo ricevitore
          - Se un messaggio non viene finalizzato (usando uno `complete()`, `defer()` o `deadletter()`, prima della sessione scade, e quindi terre messaggio nella coda/sottoscrizione per la successiva operazione di ricezione.
    syntax:
      content: function renewSessionLock()
      parameters: []
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionId'
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      L'id della sessione da cui questo ricevitore riceverà i messaggi.
      Restituisce non definito fino a quando un collegamento ricevitore AMQP correttamente impostato per la sessione.
    syntax:
      content: 'sessionId: string | undefined'
      return:
        type:
          - string | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
    name: sessionLockedUntilUtc
    fullName: sessionLockedUntilUtc
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Ora UTC fino alla quale la sessione è bloccata.
      Ogni volta che `renewSessionLock()` viene chiamato, questo tempo viene aggiornata all'ora corrente più la durata del blocco come specificato durante la creazione della coda/sottoscrizione.

      Restituisce non definito fino a quando un collegamento ricevitore AMQP correttamente impostato per la sessione.
    syntax:
      content: 'sessionLockedUntilUtc: Date | undefined'
      return:
        type:
          - Date | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.setState'
    name: setState(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Imposta lo stato della sessione. Per altre informazioni sugli stati di sessione, vedere [lo stato della sessione](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: 'function setState(state: any)'
      parameters:
        - id: state
          type:
            - any
          description: |
            Lo stato deve essere impostata.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.SessionMessageHandlerOptions'
    name: SessionMessageHandlerOptions
    spec.typeScript:
      - name: SessionMessageHandlerOptions
        fullName: SessionMessageHandlerOptions
        uid: '@azure/service-bus.SessionMessageHandlerOptions'