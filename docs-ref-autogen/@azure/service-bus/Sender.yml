### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Sender'
    name: Sender
    fullName: Sender
    children:
      - '@azure/service-bus.Sender.cancelScheduledMessage'
      - '@azure/service-bus.Sender.cancelScheduledMessages'
      - '@azure/service-bus.Sender.close'
      - '@azure/service-bus.Sender.isClosed'
      - '@azure/service-bus.Sender.scheduleMessage'
      - '@azure/service-bus.Sender.scheduleMessages'
      - '@azure/service-bus.Sender.send'
      - '@azure/service-bus.Sender.sendBatch'
    langs:
      - typeScript
    type: class
    summary: |-
      La classe mittente può essere utilizzata per inviare messaggi, pianificare i messaggi da inviare in un secondo momento e annullare tali messaggi pianificati.
      Usare il `createSender` funzione nel QueueClient o TopicClient per creare un'istanza di un mittente.
      La classe di mittente è un'astrazione sul collegamento mittente AMQP sottostante.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.cancelScheduledMessage'
    name: cancelScheduledMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: Annulla un messaggio che è stato pianificato vengono visualizzati in un bus di servizio coda/sottoscrizione.
    syntax:
      content: 'function cancelScheduledMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: Il numero di sequenza del messaggio da annullare.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.cancelScheduledMessages'
    name: 'cancelScheduledMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Annulla più i messaggi che sono stati pianificati da visualizzare nel bus di servizio coda/sottoscrizione.
    syntax:
      content: 'function cancelScheduledMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: Matrice di numeri di sequenza dei messaggi di annullamento.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Chiude il collegamento mittente AMQP sottostante.
      Una volta chiusa, il server sender non è utilizzabile per eventuali altre operazioni.
      Usare il `createSender` nel QueueClient o TopicClient per creare un'istanza di un nuovo mittente (funzione)
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: Restituisce `true` se il mittente o il client che lo ha creato è stato chiuso.
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.scheduleMessage'
    name: 'scheduleMessage(Date, SendableMessageInfo)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Pianificazioni Data messaggio venga visualizzato nel Bus di servizio coda/sottoscrizione in un secondo momento.
    syntax:
      content: 'function scheduleMessage(scheduledEnqueueTimeUtc: Date, message: SendableMessageInfo)'
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: L'ora UTC in cui il messaggio deve essere accodati.
        - id: message
          type:
            - '@azure/service-bus.SendableMessageInfo'
          description: Messaggio che deve essere pianificata.
      return:
        type:
          - Promise<Long>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.scheduleMessages'
    name: 'scheduleMessages(Date, SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Pianificazioni data messaggi venga visualizzato nel Bus di servizio coda/sottoscrizione in un secondo momento.
    syntax:
      content: 'function scheduleMessages(scheduledEnqueueTimeUtc: Date, messages: SendableMessageInfo[])'
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: L'ora UTC in cui i messaggi devono essere accodati.
        - id: messages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: Matrice di messaggi che devono essere pianificati.
      return:
        type:
          - 'Promise<Long[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.send'
    name: send(SendableMessageInfo)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Invia il messaggio specificato dopo la creazione di un collegamento AMQP mittente se non è già presente.
      Per inviare un messaggio a un `session` e/o `partition` coda/argomento abilitato, impostare il `sessionId` e/o `partitionKey` proprietà rispettivamente nel messaggio.
    syntax:
      content: 'function send(message: SendableMessageInfo)'
      parameters:
        - id: message
          type:
            - '@azure/service-bus.SendableMessageInfo'
          description: Messaggio da inviare.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.sendBatch'
    name: 'sendBatch(SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Invia i messaggi specificati in un unico batch, ad esempio in un singolo messaggio AMQP, dopo la creazione di un collegamento AMQP mittente se non è già presente.
      - Per inviare messaggi a un `session` e/o `partition` coda/argomento abilitato, impostare il `sessionId` e/o `partitionKey` rispettivamente proprietà del messaggio.
      - In tal caso, tutti i messaggi del batch devono avere lo stesso `sessionId` (se si usa sessioni) e lo stesso `parititionKey` (se si usa partizioni).
    syntax:
      content: 'function sendBatch(messages: SendableMessageInfo[])'
      parameters:
        - id: messages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: Una matrice di oggetti SendableMessageInfo da inviare in un messaggio Batch.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.SendableMessageInfo'
    name: SendableMessageInfo
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
  - uid: '@azure/service-bus.SendableMessageInfo[]'
    name: 'SendableMessageInfo[]'
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
      - name: '[]'
        fullName: '[]'