### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    fullName: Receiver
    children:
      - '@azure/service-bus.Receiver.close'
      - '@azure/service-bus.Receiver.getMessageIterator'
      - '@azure/service-bus.Receiver.isClosed'
      - '@azure/service-bus.Receiver.isReceivingMessages'
      - '@azure/service-bus.Receiver.receiveDeferredMessage'
      - '@azure/service-bus.Receiver.receiveDeferredMessages'
      - '@azure/service-bus.Receiver.receiveMessages'
      - '@azure/service-bus.Receiver.receiveMode'
      - '@azure/service-bus.Receiver.registerMessageHandler'
      - '@azure/service-bus.Receiver.renewMessageLock'
    langs:
      - typeScript
    type: class
    summary: |-
      <span data-ttu-id="0b8f9-101">La classe del ricevitore è utilizzabile per ricevere i messaggi in un batch o registrando i gestori.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-101">The Receiver class can be used to receive messages in a batch or by registering handlers.</span></span>
      <span data-ttu-id="0b8f9-102">Usare il `createReceiver` funzione nel QueueClient o SubscriptionClient per creare un'istanza di un ricevitore.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-102">Use the `createReceiver` function on the QueueClient or SubscriptionClient to instantiate a Receiver.</span></span>
      <span data-ttu-id="0b8f9-103">La classe del ricevitore è un'astrazione sul collegamento ricevitore AMQP sottostante.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-103">The Receiver class is an abstraction over the underlying AMQP receiver link.</span></span>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="0b8f9-104">Chiude il collegamento ricevitore AMQP sottostante.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-104">Closes the underlying AMQP receiver link.</span></span>
      <span data-ttu-id="0b8f9-105">Una volta chiusa, il ricevitore non è utilizzabile per eventuali altre operazioni.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-105">Once closed, the receiver cannot be used for any further operations.</span></span>
      <span data-ttu-id="0b8f9-106">Usare il `createReceiver` nel QueueClient o SubscriptionClient per creare un'istanza di un nuovo ricevitore (funzione)</span><span class="sxs-lookup"><span data-stu-id="0b8f9-106">Use the `createReceiver` function on the QueueClient or SubscriptionClient to instantiate a new Receiver</span></span>
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="0b8f9-107">Ottiene un iteratore asincrono i messaggi dal destinatario.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-107">Gets an async iterator over messages from the receiver.</span></span>
      <span data-ttu-id="0b8f9-108">Genera un errore se è presente un'altra operazione di ricezione in corso sul ricevitore di stesso.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-108">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="0b8f9-109">Se non si è certi se è presente un'altra esecuzione di operazione di ricezione, controllare il `isReceivingMessages` proprietà sul ricevitore.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-109">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>

      <span data-ttu-id="0b8f9-110">Se l'iteratore non è in grado di recuperare un nuovo messaggio in un minuto, `undefined` verranno restituiti.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-110">If the iterator is not able to fetch a new message in over a minute, `undefined` will be returned.</span></span>
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="0b8f9-111">Restituisce `true` se il ricevitore viene chiuso.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-111">Returns `true` if the receiver is closed.</span></span> <span data-ttu-id="0b8f9-112">Questa situazione può verificarsi uno perché il ricevitore stesso è stato chiuso o creare il client che si è stata chiusa.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-112">This can happen either because the receiver itself has been closed or the client that created it has been closed.</span></span>
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="0b8f9-113">Indica se il ricevitore è attualmente ricevono i messaggi o non.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-113">Indicates whether the receiver is currently receiving messages or not.</span></span>
      <span data-ttu-id="0b8f9-114">Quando viene restituito true, nuove `registerMessageHandler()` o `receiveMessages()` non è possibile effettuare chiamate.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-114">When this returns true, new `registerMessageHandler()` or `receiveMessages()` calls cannot be made.</span></span>
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="0b8f9-115">Restituisce una promessa che viene risolta in un messaggio rinviato identificato dal determinato `sequenceNumber`.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-115">Returns a promise that resolves to a deferred message identified by the given `sequenceNumber`.</span></span>
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: <span data-ttu-id="0b8f9-116">Il numero di sequenza del messaggio che deve essere ricevuto.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-116">The sequence number of the message that needs to be received.</span></span>
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="0b8f9-117">Restituisce una promessa che viene risolta in una matrice dei messaggi rinviati identificato da dato `sequenceNumbers`.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-117">Returns a promise that resolves to an array of deferred messages identified by given `sequenceNumbers`.</span></span>
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: <span data-ttu-id="0b8f9-118">Matrice di numeri di sequenza per i messaggi che devono essere ricevuti.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-118">An array of sequence numbers for the messages that need to be received.</span></span>
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="0b8f9-119">Restituisce una promessa che viene risolta in una matrice di messaggi basata su conteggio e timeout su un ricevitore di AMQP collegano da una coda/sottoscrizione.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-119">Returns a promise that resolves to an array of messages based on given count and timeout over an AMQP receiver link from a Queue/Subscription.</span></span>
      <span data-ttu-id="0b8f9-120">Genera un errore se è presente un'altra operazione di ricezione in corso sul ricevitore di stesso.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-120">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="0b8f9-121">Se non si è certi se è presente un'altra esecuzione di operazione di ricezione, controllare il `isReceivingMessages` proprietà sul ricevitore.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-121">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, idleTimeoutInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: <span data-ttu-id="0b8f9-122">Il numero massimo di messaggi per la ricezione da coda/sottoscrizione.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-122">The maximum number of messages to receive from Queue/Subscription.</span></span>
        - id: idleTimeoutInSeconds
          type:
            - undefined | number
          description: |-
            <span data-ttu-id="0b8f9-123">Il valore massimo tempo di attesa in secondi per il quale il ricevitore deve attendere di ricevere il primo messaggio.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-123">The maximum wait time in seconds for which the Receiver should wait to receive the first message.</span></span> <span data-ttu-id="0b8f9-124">Se nessun messaggio viene ricevuto a questo punto, il suggerimento restituito viene risolto in una matrice vuota.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-124">If no message is received by this time, the returned promise gets resolved to an empty array.</span></span>
            - <span data-ttu-id="0b8f9-125">**Default**: `60` secondi.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-125">**Default**: `60` seconds.</span></span>
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="0b8f9-126">Denota receiveMode di questo ricevente.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-126">Denotes receiveMode of this receiver.</span></span>
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, MessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="0b8f9-127">Registra i gestori per gestire il flusso dei messaggi in ingresso tramite un collegamento ricevitore AMQP da una coda/sottoscrizione.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-127">Registers handlers to deal with the incoming stream of messages over an AMQP receiver link from a Queue/Subscription.</span></span>
      <span data-ttu-id="0b8f9-128">Per arrestare la ricezione di messaggi, chiamare `close()` sul ricevitore.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-128">To stop receiving messages, call `close()` on the Receiver.</span></span>
      <span data-ttu-id="0b8f9-129">Genera un errore se è presente un'altra operazione di ricezione in corso sul ricevitore di stesso.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-129">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="0b8f9-130">Se non si è certi se è presente un'altra esecuzione di operazione di ricezione, controllare il `isReceivingMessages` proprietà sul ricevitore.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-130">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: MessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: <span data-ttu-id="0b8f9-131">Gestore per l'elaborazione di ogni messaggio in arrivo.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-131">Handler for processing each incoming message.</span></span>
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: <span data-ttu-id="0b8f9-132">Gestore per eventuali errori che si verifica durante la ricezione o l'elaborazione dei messaggi.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-132">Handler for any error that occurs while receiving or processing messages.</span></span>
        - id: options
          type:
            - '@azure/service-bus.MessageHandlerOptions'
          description: |
            <span data-ttu-id="0b8f9-133">Opzioni per controllare se i messaggi devono essere completati automaticamente e/o hanno dei blocchi viene rinnovato automaticamente.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-133">Options to control if messages should be automatically completed, and/or have their locks automatically renewed.</span></span> <span data-ttu-id="0b8f9-134">È possibile controllare il numero massimo di messaggi che devono essere elaborati contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-134">You can control the maximum number of messages that should be concurrently processed.</span></span> <span data-ttu-id="0b8f9-135">È anche possibile fornire un timeout in secondi per indicare la quantità di tempo di attesa per un nuovo messaggio prima di chiudere il ricevitore.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-135">You can also provide a timeout in seconds to denote the amount of time to wait for a new message before closing the receiver.</span></span>
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.renewMessageLock'
    name: renewMessageLock(string | ServiceBusMessage)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="0b8f9-136">Rinnova il blocco sul messaggio per la durata come specificato durante la creazione della coda/sottoscrizione.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-136">Renews the lock on the message for the duration as specified during the Queue/Subscription creation.</span></span>
      - <span data-ttu-id="0b8f9-137">Controllare il `lockedUntilUtc` proprietà del messaggio per il periodo di tempo quando scade.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-137">Check the `lockedUntilUtc` property on the message for the time when the lock expires.</span></span>
      - <span data-ttu-id="0b8f9-138">Se un messaggio non viene finalizzato (usando uno `complete()`, `defer()` o `deadletter()`, prima che il blocco scade, quindi terre messaggio nella coda/sottoscrizione per la successiva operazione di ricezione.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-138">If a message is not settled (using either `complete()`, `defer()` or `deadletter()`, before its lock expires, then the message lands back in the Queue/Subscription for the next receive operation.</span></span>
    syntax:
      content: 'function renewMessageLock(lockTokenOrMessage: string | ServiceBusMessage)'
      parameters:
        - id: lockTokenOrMessage
          type:
            - string | @azure/service-bus.ServiceBusMessage
          description: <span data-ttu-id="0b8f9-139">Il `lockToken` proprietà del messaggio o il messaggio stesso.</span><span class="sxs-lookup"><span data-stu-id="0b8f9-139">The `lockToken` property of the message or the message itself.</span></span>
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.MessageHandlerOptions'
    name: MessageHandlerOptions
    spec.typeScript:
      - name: MessageHandlerOptions
        fullName: MessageHandlerOptions
        uid: '@azure/service-bus.MessageHandlerOptions'
  - uid: string | @azure/service-bus.ServiceBusMessage
    name: ServiceBusMessage
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'