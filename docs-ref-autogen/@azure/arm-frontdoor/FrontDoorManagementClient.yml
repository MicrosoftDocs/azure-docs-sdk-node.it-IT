### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient'
    name: FrontDoorManagementClient
    fullName: FrontDoorManagementClient
    children:
      - '@azure/arm-frontdoor.FrontDoorManagementClient.acceptLanguage'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.backendPools'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.beginLongRunningRequest'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability_2'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability_1'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription_2'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription_1'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.credentials'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.endpoints'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.constructor'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.frontDoors'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.frontendEndpoints'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.healthProbeSettings'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.loadBalancingSettings'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.longRunningOperationRetryTimeout'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.policies'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.restoreLROPoller'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.routingRules'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.sendLongRunningRequest'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.sendLRORequest'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.sendOperationRequest'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.sendRequest'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.subscriptionId'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/arm-frontdoor.FrontDoorManagementClientContext'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.acceptLanguage'
    name: acceptLanguage
    fullName: acceptLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'acceptLanguage: string'
      return:
        type:
          - string
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.backendPools'
    name: backendPools
    fullName: backendPools
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'backendPools: BackendPools'
      return:
        type:
          - '@azure/arm-frontdoor.BackendPools'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.beginLongRunningRequest'
    name: 'beginLongRunningRequest(RequestPrepareOptions | WebResource, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="24ab0-101">Inviare la richiesta iniziale di un operazioni a esecuzione Prolungata (operazione a esecuzione prolungata) e ottenere nuovamente un HttpLongRunningOperationResponse che fornisce metodi per il polling di operazioni a esecuzione Prolungata e verifica se le operazioni a esecuzione Prolungata è stata completata.</span><span class="sxs-lookup"><span data-stu-id="24ab0-101">Send the initial request of a LRO (long running operation) and get back an HttpLongRunningOperationResponse that provides methods for polling the LRO and checking if the LRO is finished.</span></span>
    syntax:
      content: 'function beginLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase)'
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: <span data-ttu-id="24ab0-102">L'oggetto richiesta</span><span class="sxs-lookup"><span data-stu-id="24ab0-102">The request object</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability'
    name: 'checkFrontDoorNameAvailability(CheckNameAvailabilityInput, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="24ab0-103">Controllare la disponibilità del nome di una risorsa di ingresso principale.</span><span class="sxs-lookup"><span data-stu-id="24ab0-103">Check the availability of a Front Door resource name.</span></span>
    syntax:
      content: 'function checkFrontDoorNameAvailability(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: <span data-ttu-id="24ab0-104">Input da verificare.</span><span class="sxs-lookup"><span data-stu-id="24ab0-104">Input to check.</span></span>
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability_2'
    name: 'checkFrontDoorNameAvailability(CheckNameAvailabilityInput, RequestOptionsBase, ServiceCallback<CheckNameAvailabilityOutput>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkFrontDoorNameAvailability(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, options: RequestOptionsBase, callback: ServiceCallback<CheckNameAvailabilityOutput>)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: <span data-ttu-id="24ab0-105">Input da verificare.</span><span class="sxs-lookup"><span data-stu-id="24ab0-105">Input to check.</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="24ab0-106">I parametri facoltativi</span><span class="sxs-lookup"><span data-stu-id="24ab0-106">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/arm-frontdoor.CheckNameAvailabilityOutput>
          description: |
            <span data-ttu-id="24ab0-107">Il callback</span><span class="sxs-lookup"><span data-stu-id="24ab0-107">The callback</span></span>
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability_1'
    name: 'checkFrontDoorNameAvailability(CheckNameAvailabilityInput, ServiceCallback<CheckNameAvailabilityOutput>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkFrontDoorNameAvailability(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, callback: ServiceCallback<CheckNameAvailabilityOutput>)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: <span data-ttu-id="24ab0-108">Input da verificare.</span><span class="sxs-lookup"><span data-stu-id="24ab0-108">Input to check.</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/arm-frontdoor.CheckNameAvailabilityOutput>
          description: |
            <span data-ttu-id="24ab0-109">Il callback</span><span class="sxs-lookup"><span data-stu-id="24ab0-109">The callback</span></span>
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription'
    name: 'checkFrontDoorNameAvailabilityWithSubscription(CheckNameAvailabilityInput, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="24ab0-110">Verificare la disponibilità di un sottodominio di ingresso principale.</span><span class="sxs-lookup"><span data-stu-id="24ab0-110">Check the availability of a Front Door subdomain.</span></span>
    syntax:
      content: 'function checkFrontDoorNameAvailabilityWithSubscription(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: <span data-ttu-id="24ab0-111">Input da verificare.</span><span class="sxs-lookup"><span data-stu-id="24ab0-111">Input to check.</span></span>
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityWithSubscriptionResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription_2'
    name: 'checkFrontDoorNameAvailabilityWithSubscription(CheckNameAvailabilityInput, RequestOptionsBase, ServiceCallback<CheckNameAvailabilityOutput>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkFrontDoorNameAvailabilityWithSubscription(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, options: RequestOptionsBase, callback: ServiceCallback<CheckNameAvailabilityOutput>)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: <span data-ttu-id="24ab0-112">Input da verificare.</span><span class="sxs-lookup"><span data-stu-id="24ab0-112">Input to check.</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="24ab0-113">I parametri facoltativi</span><span class="sxs-lookup"><span data-stu-id="24ab0-113">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/arm-frontdoor.CheckNameAvailabilityOutput>
          description: |
            <span data-ttu-id="24ab0-114">Il callback</span><span class="sxs-lookup"><span data-stu-id="24ab0-114">The callback</span></span>
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityWithSubscriptionResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription_1'
    name: 'checkFrontDoorNameAvailabilityWithSubscription(CheckNameAvailabilityInput, ServiceCallback<CheckNameAvailabilityOutput>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkFrontDoorNameAvailabilityWithSubscription(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, callback: ServiceCallback<CheckNameAvailabilityOutput>)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: <span data-ttu-id="24ab0-115">Input da verificare.</span><span class="sxs-lookup"><span data-stu-id="24ab0-115">Input to check.</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/arm-frontdoor.CheckNameAvailabilityOutput>
          description: |
            <span data-ttu-id="24ab0-116">Il callback</span><span class="sxs-lookup"><span data-stu-id="24ab0-116">The callback</span></span>
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityWithSubscriptionResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.credentials'
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type:
          - ServiceClientCredentials
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.endpoints'
    name: endpoints
    fullName: endpoints
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'endpoints: Endpoints'
      return:
        type:
          - '@azure/arm-frontdoor.Endpoints'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.constructor'
    name: 'FrontDoorManagementClient(ServiceClientCredentials, string, Models.FrontDoorManagementClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: <span data-ttu-id="24ab0-117">Inizializza una nuova istanza della classe FrontDoorManagementClient.</span><span class="sxs-lookup"><span data-stu-id="24ab0-117">Initializes a new instance of the FrontDoorManagementClient class.</span></span>
    syntax:
      content: 'new FrontDoorManagementClient(credentials: ServiceClientCredentials, subscriptionId: string, options?: Models.FrontDoorManagementClientOptions)'
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: <span data-ttu-id="24ab0-118">Credenziali necessarie per il client per connettersi ad Azure.</span><span class="sxs-lookup"><span data-stu-id="24ab0-118">Credentials needed for the client to connect to Azure.</span></span>
        - id: subscriptionId
          type:
            - string
          description: <span data-ttu-id="24ab0-119">Le credenziali della sottoscrizione che lo identificano in modo univoco la sottoscrizione di Microsoft Azure.</span><span class="sxs-lookup"><span data-stu-id="24ab0-119">The subscription credentials which uniquely identify the Microsoft Azure subscription.</span></span> <span data-ttu-id="24ab0-120">L'ID sottoscrizione fa parte dell'URI per ogni chiamata di servizio.</span><span class="sxs-lookup"><span data-stu-id="24ab0-120">The subscription ID forms part of the URI for every service call.</span></span>
        - id: options
          type:
            - Models.FrontDoorManagementClientOptions
          description: ''
          optional: true
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.frontDoors'
    name: frontDoors
    fullName: frontDoors
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'frontDoors: FrontDoors'
      return:
        type:
          - '@azure/arm-frontdoor.FrontDoors'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.frontendEndpoints'
    name: frontendEndpoints
    fullName: frontendEndpoints
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'frontendEndpoints: FrontendEndpoints'
      return:
        type:
          - '@azure/arm-frontdoor.FrontendEndpoints'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.healthProbeSettings'
    name: healthProbeSettings
    fullName: healthProbeSettings
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'healthProbeSettings: HealthProbeSettings'
      return:
        type:
          - '@azure/arm-frontdoor.HealthProbeSettings'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.loadBalancingSettings'
    name: loadBalancingSettings
    fullName: loadBalancingSettings
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'loadBalancingSettings: LoadBalancingSettings'
      return:
        type:
          - '@azure/arm-frontdoor.LoadBalancingSettings'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.longRunningOperationRetryTimeout'
    name: longRunningOperationRetryTimeout
    fullName: longRunningOperationRetryTimeout
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="24ab0-121">Il timeout di ripetizione dei tentativi in secondi per operazioni con esecuzione prolungata.</span><span class="sxs-lookup"><span data-stu-id="24ab0-121">The retry timeout in seconds for Long Running Operations.</span></span> <span data-ttu-id="24ab0-122">Il valore predefinito è 30.</span><span class="sxs-lookup"><span data-stu-id="24ab0-122">Default value is 30.</span></span>
    optional: true
    syntax:
      content: 'longRunningOperationRetryTimeout?: undefined | number'
      return:
        type:
          - undefined | number
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.policies'
    name: policies
    fullName: policies
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'policies: Policies'
      return:
        type:
          - '@azure/arm-frontdoor.Policies'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.restoreLROPoller'
    name: restoreLROPoller(LROPollState)
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="24ab0-123">Ripristinare un LROPoller dal LROPollState fornito.</span><span class="sxs-lookup"><span data-stu-id="24ab0-123">Restore an LROPoller from the provided LROPollState.</span></span> <span data-ttu-id="24ab0-124">Questo metodo può essere utilizzato per ricreare un LROPoller su un altro processo o computer.</span><span class="sxs-lookup"><span data-stu-id="24ab0-124">This method can be used to recreate an LROPoller on a different process or machine.</span></span>
    syntax:
      content: 'function restoreLROPoller(lroPollState: LROPollState)'
      parameters:
        - id: lroPollState
          type:
            - LROPollState
          description: ''
      return:
        type:
          - LROPoller
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.routingRules'
    name: routingRules
    fullName: routingRules
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'routingRules: RoutingRules'
      return:
        type:
          - '@azure/arm-frontdoor.RoutingRules'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.sendLongRunningRequest'
    name: 'sendLongRunningRequest(RequestPrepareOptions | WebResource, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="24ab0-125">Fornisce un meccanismo per eseguire una richiesta che si esegue il polling e fornirà il risultato finale.</span><span class="sxs-lookup"><span data-stu-id="24ab0-125">Provides a mechanism to make a request that will poll and provide the final result.</span></span>
    syntax:
      content: 'function sendLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase)'
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: <span data-ttu-id="24ab0-126">L'oggetto richiesta</span><span class="sxs-lookup"><span data-stu-id="24ab0-126">The request object</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.sendLRORequest'
    name: 'sendLRORequest(OperationArguments, OperationSpec, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="24ab0-127">Inviare la richiesta iniziale di un operazioni a esecuzione Prolungata (operazione a esecuzione prolungata) e ottenere nuovamente un LROPoller che fornisce metodi per il polling di operazioni a esecuzione Prolungata e verifica se le operazioni a esecuzione Prolungata è stata completata.</span><span class="sxs-lookup"><span data-stu-id="24ab0-127">Send the initial request of a LRO (long running operation) and get back an LROPoller that provides methods for polling the LRO and checking if the LRO is finished.</span></span>
    syntax:
      content: 'function sendLRORequest(operationArguments: OperationArguments, operationSpec: OperationSpec, options?: RequestOptionsBase)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: <span data-ttu-id="24ab0-128">Gli argomenti per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="24ab0-128">The arguments to the operation.</span></span>
        - id: operationSpec
          type:
            - OperationSpec
          description: <span data-ttu-id="24ab0-129">Specifica per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="24ab0-129">The specification for the operation.</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="24ab0-130">Opzioni aggiuntive da inviare durante la richiesta.</span><span class="sxs-lookup"><span data-stu-id="24ab0-130">Additional options to be sent while making the request.</span></span>
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.sendOperationRequest'
    name: 'sendOperationRequest(OperationArguments, OperationSpec, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="24ab0-131">Inviare una richiesta HTTP che viene popolata usando il OperationSpec fornito.</span><span class="sxs-lookup"><span data-stu-id="24ab0-131">Send an HTTP request that is populated using the provided OperationSpec.</span></span>
    syntax:
      content: 'function sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: <span data-ttu-id="24ab0-132">Gli argomenti che verranno popolati con i valori basati su modelli della richiesta HTTP.</span><span class="sxs-lookup"><span data-stu-id="24ab0-132">The arguments that the HTTP request's templated values will be populated from.</span></span>
        - id: operationSpec
          type:
            - OperationSpec
          description: <span data-ttu-id="24ab0-133">OperationSpec da usare per popolare il httpRequest.</span><span class="sxs-lookup"><span data-stu-id="24ab0-133">The OperationSpec to use to populate the httpRequest.</span></span>
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            <span data-ttu-id="24ab0-134">Callback da chiamare quando viene ricevuta la risposta.</span><span class="sxs-lookup"><span data-stu-id="24ab0-134">The callback to call when the response is received.</span></span>
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="24ab0-135">Invio di richiesta HTTP specificato.</span><span class="sxs-lookup"><span data-stu-id="24ab0-135">Send the provided httpRequest.</span></span>
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.subscriptionId'
    name: subscriptionId
    fullName: subscriptionId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'subscriptionId: string'
      return:
        type:
          - string
    package: '@azure/arm-frontdoor'
references:
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClientContext'
    name: FrontDoorManagementClientContext
    spec.typeScript:
      - name: FrontDoorManagementClientContext
        fullName: FrontDoorManagementClientContext
        uid: '@azure/arm-frontdoor.FrontDoorManagementClientContext'
  - uid: '@azure/arm-frontdoor.BackendPools'
    name: BackendPools
    spec.typeScript:
      - name: BackendPools
        fullName: BackendPools
        uid: '@azure/arm-frontdoor.BackendPools'
  - uid: '@azure/arm-frontdoor.Endpoints'
    name: Endpoints
    spec.typeScript:
      - name: Endpoints
        fullName: Endpoints
        uid: '@azure/arm-frontdoor.Endpoints'
  - uid: '@azure/arm-frontdoor.FrontDoors'
    name: FrontDoors
    spec.typeScript:
      - name: FrontDoors
        fullName: FrontDoors
        uid: '@azure/arm-frontdoor.FrontDoors'
  - uid: '@azure/arm-frontdoor.FrontendEndpoints'
    name: FrontendEndpoints
    spec.typeScript:
      - name: FrontendEndpoints
        fullName: FrontendEndpoints
        uid: '@azure/arm-frontdoor.FrontendEndpoints'
  - uid: '@azure/arm-frontdoor.HealthProbeSettings'
    name: HealthProbeSettings
    spec.typeScript:
      - name: HealthProbeSettings
        fullName: HealthProbeSettings
        uid: '@azure/arm-frontdoor.HealthProbeSettings'
  - uid: '@azure/arm-frontdoor.LoadBalancingSettings'
    name: LoadBalancingSettings
    spec.typeScript:
      - name: LoadBalancingSettings
        fullName: LoadBalancingSettings
        uid: '@azure/arm-frontdoor.LoadBalancingSettings'
  - uid: '@azure/arm-frontdoor.Policies'
    name: Policies
    spec.typeScript:
      - name: Policies
        fullName: Policies
        uid: '@azure/arm-frontdoor.Policies'
  - uid: '@azure/arm-frontdoor.RoutingRules'
    name: RoutingRules
    spec.typeScript:
      - name: RoutingRules
        fullName: RoutingRules
        uid: '@azure/arm-frontdoor.RoutingRules'
  - uid: '@azure/arm-frontdoor.CheckNameAvailabilityInput'
    name: CheckNameAvailabilityInput
    spec.typeScript:
      - name: CheckNameAvailabilityInput
        fullName: CheckNameAvailabilityInput
        uid: '@azure/arm-frontdoor.CheckNameAvailabilityInput'
  - uid: ServiceCallback<@azure/arm-frontdoor.CheckNameAvailabilityOutput>
    name: CheckNameAvailabilityOutput>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CheckNameAvailabilityOutput
        fullName: CheckNameAvailabilityOutput
        uid: '@azure/arm-frontdoor.CheckNameAvailabilityOutput'
      - name: '>'
        fullName: '>'