### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-commerce.RateCard'
    name: RateCard
    fullName: RateCard
    children:
      - '@azure/arm-commerce.RateCard.get'
      - '@azure/arm-commerce.RateCard.get_2'
      - '@azure/arm-commerce.RateCard.get_1'
      - '@azure/arm-commerce.RateCard.constructor'
    langs:
      - typeScript
    type: class
    summary: Classe che rappresenta un RateCard.
    package: '@azure/arm-commerce'
  - uid: '@azure/arm-commerce.RateCard.get'
    name: 'get(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Consente di eseguire query per i metadati di risorse o del contatore e correlati indicati in prezzi applicati in una determinata sottoscrizione dall''ID dell''offerta, valuta, le impostazioni locali e area. I metadati associati i contatori di fatturazione, inclusi ma non è limitata ai nomi dei servizi, tipi, le risorse, le unità di misura e le aree, è soggetto a modifiche in qualsiasi momento e senza preavviso. Se si prevede di usare questi dati di fatturazione in modo automatico, usare i contatori di fatturazione GUID per identificare in modo univoco ogni elemento fatturabile. Se i contatori di fatturazione GUID sono pianificata per modificare a causa di un nuovo modello di fatturazione, riceverà una notifica prima della modifica.'
    syntax:
      content: 'function get(filter: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: filter
          type:
            - string
          description: 'Il filtro da applicare nell''operazione. Supporta solo ''eq'' e gli operatori logici ''e'' in questo momento. Tutti i 4 parametri di query ''OfferDurableId'', ''Currency'', ''Impostazioni locali'', ''Region'' deve essere una parte di $filter.'
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RateCardGetResponse>
    package: '@azure/arm-commerce'
  - uid: '@azure/arm-commerce.RateCard.get_2'
    name: 'get(string, RequestOptionsBase, ServiceCallback<ResourceRateCardInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(filter: string, options: RequestOptionsBase, callback: ServiceCallback<ResourceRateCardInfo>)'
      parameters:
        - id: filter
          type:
            - string
          description: 'Il filtro da applicare nell''operazione. Supporta solo ''eq'' e gli operatori logici ''e'' in questo momento. Tutti i 4 parametri di query ''OfferDurableId'', ''Currency'', ''Impostazioni locali'', ''Region'' deve essere una parte di $filter.'
        - id: options
          type:
            - RequestOptionsBase
          description: I parametri facoltativi
        - id: callback
          type:
            - ServiceCallback<@azure/arm-commerce.ResourceRateCardInfo>
          description: |
            Il callback
      return:
        type:
          - Promise<Models.RateCardGetResponse>
    package: '@azure/arm-commerce'
  - uid: '@azure/arm-commerce.RateCard.get_1'
    name: 'get(string, ServiceCallback<ResourceRateCardInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(filter: string, callback: ServiceCallback<ResourceRateCardInfo>)'
      parameters:
        - id: filter
          type:
            - string
          description: 'Il filtro da applicare nell''operazione. Supporta solo ''eq'' e gli operatori logici ''e'' in questo momento. Tutti i 4 parametri di query ''OfferDurableId'', ''Currency'', ''Impostazioni locali'', ''Region'' deve essere una parte di $filter.'
        - id: callback
          type:
            - ServiceCallback<@azure/arm-commerce.ResourceRateCardInfo>
          description: |
            Il callback
      return:
        type:
          - Promise<Models.RateCardGetResponse>
    package: '@azure/arm-commerce'
  - uid: '@azure/arm-commerce.RateCard.constructor'
    name: RateCard(UsageManagementClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creare un RateCard.
    syntax:
      content: 'new RateCard(client: UsageManagementClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/arm-commerce.UsageManagementClientContext'
          description: |
            Riferimento al client del servizio.
    package: '@azure/arm-commerce'
references:
  - uid: '@azure/arm-commerce.UsageManagementClientContext'
    name: UsageManagementClientContext
    spec.typeScript:
      - name: UsageManagementClientContext
        fullName: UsageManagementClientContext
        uid: '@azure/arm-commerce.UsageManagementClientContext'
  - uid: ServiceCallback<@azure/arm-commerce.ResourceRateCardInfo>
    name: ResourceRateCardInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ResourceRateCardInfo
        fullName: ResourceRateCardInfo
        uid: '@azure/arm-commerce.ResourceRateCardInfo'
      - name: '>'
        fullName: '>'