### YamlMime:UniversalReference
ms.openlocfilehash: bafdde9c894bafe3f29ff0d2a6f14f73e8b3214e
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 12/13/2018
ms.locfileid: "52044459"
items:
- uid: '@azure/cosmos.Conflicts'
  name: Conflicts
  fullName: Conflicts
  children:
  - '@azure/cosmos.Conflicts.constructor'
  - '@azure/cosmos.Conflicts.container'
  - '@azure/cosmos.Conflicts.query'
  - '@azure/cosmos.Conflicts.query_1'
  - '@azure/cosmos.Conflicts.readAll'
  langs:
  - typeScript
  type: class
  summary: Consente di eseguire una query o leggere tutti i conflitti.
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Conflicts.constructor'
  name: Conflicts(Container, ClientContext)
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Conflicts(container: Container, clientContext: ClientContext)'
    parameters:
    - id: container
      type:
      - '@azure/cosmos.Container'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Conflicts.container'
  name: container
  fullName: container
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'container: Container'
    return:
      type:
      - '@azure/cosmos.Container'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Conflicts.query'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Esegue una query tutti i conflitti.
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: Configurazione di query per l'operazione. Vedere <xref:SqlQuerySpec> per altre informazioni su come configurare una query.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<any>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Conflicts.query_1'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Esegue una query tutti i conflitti.
  syntax:
    content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: Configurazione di query per l'operazione. Vedere <xref:SqlQuerySpec> per altre informazioni su come configurare una query.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<T>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Conflicts.readAll'
  name: readAll(FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Legge tutti i conflitti
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: >
        Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ConflictDefinition & @azure/cosmos.Resource>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Container'
  name: Container
  spec.typeScript:
  - name: Container
    fullName: Container
    uid: '@azure/cosmos.Container'
- uid: '@azure/cosmos.SqlQuerySpec'
  name: SqlQuerySpec
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  name: FeedOptions
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<any>'
  name: QueryIterator<any>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <any>
    fullName: <any>
- uid: '@azure/cosmos.QueryIterator<T>'
  name: QueryIterator<T>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <T>
    fullName: <T>
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ConflictDefinition & @azure/cosmos.Resource>'
  name: Resource>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: ConflictDefinition
    fullName: ConflictDefinition
    uid: '@azure/cosmos.ConflictDefinition'
  - name: " & "
    fullName: " & "
  - name: Resource
    fullName: Resource
    uid: '@azure/cosmos.Resource'
  - name: '>'
    fullName: '>'
