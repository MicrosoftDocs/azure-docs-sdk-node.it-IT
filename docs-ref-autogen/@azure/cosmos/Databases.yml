### YamlMime:UniversalReference
ms.openlocfilehash: 4ae6f55ce908dd8b74a39abdec8f6936dcb4ced1
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 12/13/2018
ms.locfileid: "52029485"
items:
- uid: '@azure/cosmos.Databases'
  name: Databases
  fullName: Databases
  children:
  - '@azure/cosmos.Databases.client'
  - '@azure/cosmos.Databases.create'
  - '@azure/cosmos.Databases.createIfNotExists'
  - '@azure/cosmos.Databases.query'
  - '@azure/cosmos.Databases.query_1'
  - '@azure/cosmos.Databases.readAll'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="94673-101">Operazioni per la creazione di nuovi database e tutti i database di lettura/query</span><span class="sxs-lookup"><span data-stu-id="94673-101">Operations for creating new databases, and reading/querying all databases</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.client'
  name: client
  fullName: client
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'client: CosmosClient'
    return:
      type:
      - '@azure/cosmos.CosmosClient'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.create'
  name: create(DatabaseDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="94673-102">Inviare una richiesta per la creazione di un database.</span><span class="sxs-lookup"><span data-stu-id="94673-102">Send a request for creating a database.</span></span>

    <span data-ttu-id="94673-103">Un database consente di gestire utenti, autorizzazioni e un set di contenitori.</span><span class="sxs-lookup"><span data-stu-id="94673-103">A database manages users, permissions and a set of containers.</span></span>

    <span data-ttu-id="94673-104">Ogni Account di Database di Azure Cosmos DB è in grado di supportare più database indipendenti denominati, con il database in corso il contenitore logico per i dati.</span><span class="sxs-lookup"><span data-stu-id="94673-104">Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data.</span></span>


    <span data-ttu-id="94673-105">Ogni Database è costituito da uno o più contenitori, ognuno dei quali a loro volta contengono uno o più documenti.</span><span class="sxs-lookup"><span data-stu-id="94673-105">Each Database consists of one or more containers, each of which in turn contain one or more documents.</span></span> <span data-ttu-id="94673-106">Poiché i database sono una risorsa amministrativa, chiave Master del servizio sarà necessario per poter accedere e completare correttamente tutte le attività utilizzando le API di utente.</span><span class="sxs-lookup"><span data-stu-id="94673-106">Since databases are an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs.</span></span>
  syntax:
    content: 'function create(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <span data-ttu-id="94673-107">Il <xref:DatabaseDefinition> che rappresenta il <xref:Database> da creare.</span><span class="sxs-lookup"><span data-stu-id="94673-107">The <xref:DatabaseDefinition> that represents the <xref:Database> to be created.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="94673-108">Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.</span><span class="sxs-lookup"><span data-stu-id="94673-108">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.createIfNotExists'
  name: createIfNotExists(DatabaseDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="94673-109">Controllare se è presente un database e non, crearla.</span><span class="sxs-lookup"><span data-stu-id="94673-109">Check if a database exists, and if it doesn't, create it.</span></span>

    <span data-ttu-id="94673-110">In questo modo un'operazione di lettura in base all'id nel `body`, quindi, se non viene trovata, un'operazione di creazione.</span><span class="sxs-lookup"><span data-stu-id="94673-110">This will make a read operation based on the id in the `body`, then if it is not found, a create operation.</span></span>

    <span data-ttu-id="94673-111">Un database consente di gestire utenti, autorizzazioni e un set di contenitori.</span><span class="sxs-lookup"><span data-stu-id="94673-111">A database manages users, permissions and a set of containers.</span></span>

    <span data-ttu-id="94673-112">Ogni Account di Database di Azure Cosmos DB è in grado di supportare più database indipendenti denominati, con il database in corso il contenitore logico per i dati.</span><span class="sxs-lookup"><span data-stu-id="94673-112">Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data.</span></span>


    <span data-ttu-id="94673-113">Ogni Database è costituito da uno o più contenitori, ognuno dei quali a loro volta contengono uno o più documenti.</span><span class="sxs-lookup"><span data-stu-id="94673-113">Each Database consists of one or more containers, each of which in turn contain one or more documents.</span></span> <span data-ttu-id="94673-114">Poiché i database sono una risorsa amministrativa, chiave Master del servizio saranno necessari per poter accedere e completare correttamente tutte le attività utilizzando le API di utente.</span><span class="sxs-lookup"><span data-stu-id="94673-114">Since databases are an an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs.</span></span>
  syntax:
    content: 'function createIfNotExists(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <span data-ttu-id="94673-115">Il <xref:DatabaseDefinition> che rappresenta il <xref:Database> da creare.</span><span class="sxs-lookup"><span data-stu-id="94673-115">The <xref:DatabaseDefinition> that represents the <xref:Database> to be created.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: "\n"
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.query'
  name: query(string | SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="94673-116">Esegue una query tutti i database.</span><span class="sxs-lookup"><span data-stu-id="94673-116">Queries all databases.</span></span>
  syntax:
    content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: <span data-ttu-id="94673-117">Configurazione di query per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="94673-117">Query configuration for the operation.</span></span> <span data-ttu-id="94673-118">Vedere <xref:SqlQuerySpec> per altre informazioni su come configurare una query.</span><span class="sxs-lookup"><span data-stu-id="94673-118">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="94673-119">Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.</span><span class="sxs-lookup"><span data-stu-id="94673-119">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<any>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.query_1'
  name: query(string | SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="94673-120">Esegue una query tutti i database.</span><span class="sxs-lookup"><span data-stu-id="94673-120">Queries all databases.</span></span>
  syntax:
    content: 'function query<T>(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: <span data-ttu-id="94673-121">Configurazione di query per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="94673-121">Query configuration for the operation.</span></span> <span data-ttu-id="94673-122">Vedere <xref:SqlQuerySpec> per altre informazioni su come configurare una query.</span><span class="sxs-lookup"><span data-stu-id="94673-122">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="94673-123">Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.</span><span class="sxs-lookup"><span data-stu-id="94673-123">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<T>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.readAll'
  name: readAll(FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="94673-124">Legge tutti i database.</span><span class="sxs-lookup"><span data-stu-id="94673-124">Reads all databases.</span></span>
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="94673-125">Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.</span><span class="sxs-lookup"><span data-stu-id="94673-125">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition & @azure/cosmos.Resource>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.CosmosClient'
  name: CosmosClient
  spec.typeScript:
  - name: CosmosClient
    fullName: CosmosClient
    uid: '@azure/cosmos.CosmosClient'
- uid: '@azure/cosmos.DatabaseDefinition'
  name: DatabaseDefinition
  spec.typeScript:
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
- uid: '@azure/cosmos.RequestOptions'
  name: RequestOptions
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.DatabaseResponse>
  name: DatabaseResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DatabaseResponse
    fullName: DatabaseResponse
    uid: '@azure/cosmos.DatabaseResponse'
  - name: '>'
    fullName: '>'
- uid: string | @azure/cosmos.SqlQuerySpec
  name: SqlQuerySpec
  spec.typeScript:
  - name: 'string | '
    fullName: 'string | '
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  name: FeedOptions
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<any>'
  name: QueryIterator<any>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <any>
    fullName: <any>
- uid: '@azure/cosmos.QueryIterator<T>'
  name: QueryIterator<T>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <T>
    fullName: <T>
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition & @azure/cosmos.Resource>'
  name: Resource>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
  - name: " & "
    fullName: " & "
  - name: Resource
    fullName: Resource
    uid: '@azure/cosmos.Resource'
  - name: '>'
    fullName: '>'
