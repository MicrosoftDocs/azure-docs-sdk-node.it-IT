### YamlMime:UniversalReference
ms.openlocfilehash: ef0a15814adb8ac1c36af0e1f26ebfb7d4ea6fca
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 12/13/2018
ms.locfileid: "52062806"
items:
- uid: '@azure/cosmos.QueryIterator'
  name: QueryIterator
  fullName: QueryIterator<T>
  children:
  - '@azure/cosmos.QueryIterator.current'
  - '@azure/cosmos.QueryIterator.executeNext'
  - '@azure/cosmos.QueryIterator.forEach'
  - '@azure/cosmos.QueryIterator.getAsyncIterator'
  - '@azure/cosmos.QueryIterator.hasMoreResults'
  - '@azure/cosmos.QueryIterator.nextItem'
  - '@azure/cosmos.QueryIterator.reset'
  - '@azure/cosmos.QueryIterator.toArray'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="71216-101">Rappresenta un oggetto QueryIterator, un implmenetation della query o feed di risposta che consente l'attraversamento e scorrere la risposta nel servizio di database Azure Cosmos DB.</span><span class="sxs-lookup"><span data-stu-id="71216-101">Represents a QueryIterator Object, an implmenetation of feed or query response that enables traversal and iterating over the response in the Azure Cosmos DB database service.</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.current'
  name: current()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="71216-102">Recuperare l'elemento corrente nella QueryIterator.</span><span class="sxs-lookup"><span data-stu-id="71216-102">Retrieve the current element on the QueryIterator.</span></span>
  syntax:
    content: function current()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.executeNext'
  name: executeNext()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="71216-103">Recuperare il batch successivo del feed e passarli come matrice a una funzione</span><span class="sxs-lookup"><span data-stu-id="71216-103">Retrieve the next batch of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function executeNext()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.forEach'
  name: 'forEach((result: T, headers?: IHeaders, index?: number) => boolean | void)'
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="71216-104">Chiama un callback specificato per ogni elemento restituito dalla query.</span><span class="sxs-lookup"><span data-stu-id="71216-104">Calls a specified callback for each item returned from the query.</span></span>

    <span data-ttu-id="71216-105">Viene eseguito in modo seriale. ogni callback Blocca successivo.</span><span class="sxs-lookup"><span data-stu-id="71216-105">Runs serially; each callback blocks the next.</span></span>
  syntax:
    content: 'function forEach(callback: (result: T, headers?: IHeaders, index?: number) => boolean | void)'
    parameters:
    - id: callback
      type:
      - '(result: T, headers?: IHeaders, index?: number) => boolean | void'
      description: >
        <span data-ttu-id="71216-106">Callback specificato.</span><span class="sxs-lookup"><span data-stu-id="71216-106">Specified callback.</span></span>

        <span data-ttu-id="71216-107">Il primo parametro è il risultato, secondo param (facoltativo) è lo stato corrente dell'oggetto delle intestazioni, terza param (facoltativo) è l'indice corrente.</span><span class="sxs-lookup"><span data-stu-id="71216-107">First param is the result, second param (optional) is the current headers object state, third param (optional) is current index.</span></span>

        <span data-ttu-id="71216-108">Non verrà chiamato alcun callback ulteriori se uno di essi restituisce false.</span><span class="sxs-lookup"><span data-stu-id="71216-108">No more callbacks will be called if one of them results false.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.getAsyncIterator'
  name: getAsyncIterator()
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="71216-109">Ottiene un iteratore asincrono che produrrà risultati fino al completamento.</span><span class="sxs-lookup"><span data-stu-id="71216-109">Gets an async iterator that will yield results until completion.</span></span>

    <span data-ttu-id="71216-110">NOTA: AsyncIterators sono una funzionalità molto nuova e potrebbe essere necessario usare polyfils/e così via per poterli usare nel codice.</span><span class="sxs-lookup"><span data-stu-id="71216-110">NOTE: AsyncIterators are a very new feature and you might need to use polyfils/etc. in order to use them in your code.</span></span>


    <span data-ttu-id="71216-111">Se si usa TypeScript, è possibile usare il seguente polyfill come fino a quando è target ES6 o versioni successive e sono in esecuzione nel nodo 6 o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="71216-111">If you're using TypeScript, you can use the following polyfill as long as you target ES6 or higher and are running on Node 6 or higher.</span></span>


    ```typescript

    if (!Symbol || !Symbol.asyncIterator) {
      (Symbol as any).asyncIterator = Symbol.for("Symbol.asyncIterator");
    }

    ```
  syntax:
    content: function getAsyncIterator()
    parameters: []
    return:
      type:
      - AsyncIterable<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.hasMoreResults'
  name: hasMoreResults()
  children: []
  type: method
  langs:
  - typeScript
  summary: ''
  syntax:
    content: function hasMoreResults()
    parameters: []
    return:
      type:
      - boolean
  package: '@azure/cosmos'
  deprecated:
    content: >-
      Instead check if nextItem() or current() returns undefined.


      Determine if there are still remaining resources to processs based on the value of the continuation token or the\

      elements remaining on the current batch in the QueryIterator.
- uid: '@azure/cosmos.QueryIterator.nextItem'
  name: nextItem()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="71216-112">Eseguire una funzione specificata sull'elemento successivo nel QueryIterator.</span><span class="sxs-lookup"><span data-stu-id="71216-112">Execute a provided function on the next element in the QueryIterator.</span></span>
  syntax:
    content: function nextItem()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.reset'
  name: reset()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="71216-113">Reimpostare il QueryIterator all'inizio e deselezionare tutte le risorse al suo interno</span><span class="sxs-lookup"><span data-stu-id="71216-113">Reset the QueryIterator to the beginning and clear all the resources inside it</span></span>
  syntax:
    content: function reset()
    parameters: []
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.toArray'
  name: toArray()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="71216-114">Recuperare tutti gli elementi del feed e passarli come matrice a una funzione</span><span class="sxs-lookup"><span data-stu-id="71216-114">Retrieve all the elements of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function toArray()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T[]>>
  package: '@azure/cosmos'
references:
- uid: Promise<@azure/cosmos.Response<T>>
  name: Response<T>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: AsyncIterable<@azure/cosmos.Response<T>>
  name: Response<T>>
  spec.typeScript:
  - name: AsyncIterable<
    fullName: AsyncIterable<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: Promise<@azure/cosmos.Response<T[]>>
  name: Response<T[]>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T[]>>
    fullName: <T[]>>
