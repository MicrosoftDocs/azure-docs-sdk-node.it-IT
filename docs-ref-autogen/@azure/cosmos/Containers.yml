### YamlMime:UniversalReference
ms.openlocfilehash: 8782d0bb5cc1c9e037d86d2afa22bc3833db3f38
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 08/12/2018
ms.locfileid: "40071360"
items:
- uid: '@azure/cosmos.Containers'
  name: Containers
  fullName: Containers
  children:
  - '@azure/cosmos.Containers.constructor'
  - '@azure/cosmos.Containers.create'
  - '@azure/cosmos.Containers.createIfNotExists'
  - '@azure/cosmos.Containers.database'
  - '@azure/cosmos.Containers.query'
  - '@azure/cosmos.Containers.readAll'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="ed00b-101">Operazioni per la creazione di nuovi contenitori e la lettura/esecuzione di query su tutti i contenitori</span><span class="sxs-lookup"><span data-stu-id="ed00b-101">Operations for creating new containers, and reading/querying all containers</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.constructor'
  name: Containers
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Containers(database: Database)'
    parameters:
    - id: database
      type:
      - '@azure/cosmos.Database'
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="ed00b-102">Crea un contenitore.</span><span class="sxs-lookup"><span data-stu-id="ed00b-102">Creates a container.</span></span>

    <span data-ttu-id="ed00b-103">Un contenitore è un contenitore logico denominato per gli elementi.</span><span class="sxs-lookup"><span data-stu-id="ed00b-103">A container is a named logical container for items.</span></span>


    <span data-ttu-id="ed00b-104">Un database può contenere zero o più contenitori con nomi e ogni contenitore è costituito da zero o più elementi JSON.</span><span class="sxs-lookup"><span data-stu-id="ed00b-104">A database may contain zero or more named containers and each container consists of zero or more JSON items.</span></span>


    <span data-ttu-id="ed00b-105">Sia privo di schema, gli elementi in un contenitore non sono necessario condividere la stessa struttura o i campi.</span><span class="sxs-lookup"><span data-stu-id="ed00b-105">Being schema-free, the items in a container do not need to share the same structure or fields.</span></span>



    <span data-ttu-id="ed00b-106">Poiché i contenitori sono risorse dell'applicazione, può essere autorizzati tramite la chiave master o le chiavi di risorsa.</span><span class="sxs-lookup"><span data-stu-id="ed00b-106">Since containers are application resources, they can be authorized using either the master key or resource keys.</span></span>
  syntax:
    content: 'function create(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: <span data-ttu-id="ed00b-107">Rappresenta il corpo del contenitore.</span><span class="sxs-lookup"><span data-stu-id="ed00b-107">Represents the body of the container.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="ed00b-108">Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.</span><span class="sxs-lookup"><span data-stu-id="ed00b-108">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="ed00b-109">Controlla se un contenitore esiste e, in caso contrario, lo crea.</span><span class="sxs-lookup"><span data-stu-id="ed00b-109">Checks if a Container exists, and, if it doesn't, creates it.</span></span>

    <span data-ttu-id="ed00b-110">In questo modo un'operazione di lettura in base all'id nel `body`, quindi, se non viene trovata, un'operazione di creazione.</span><span class="sxs-lookup"><span data-stu-id="ed00b-110">This will make a read operation based on the id in the `body`, then if it is not found, a create operation.</span></span>

    <span data-ttu-id="ed00b-111">È necessario verificare che l'output corrisponda al corpo che è passato per le proprietà non predefinita (ad esempio indicizzazione criteri e così via.) Un contenitore è un contenitore logico denominato per gli elementi.</span><span class="sxs-lookup"><span data-stu-id="ed00b-111">You should confirm that the output matches the body you passed in for non-default properties (i.e. indexing policy/etc.) A container is a named logical container for items.</span></span>


    <span data-ttu-id="ed00b-112">Un database può contenere zero o più contenitori con nomi e ogni contenitore è costituito da zero o più elementi JSON.</span><span class="sxs-lookup"><span data-stu-id="ed00b-112">A database may contain zero or more named containers and each container consists of zero or more JSON items.</span></span>


    <span data-ttu-id="ed00b-113">Sia privo di schema, gli elementi in un contenitore non sono necessario condividere la stessa struttura o i campi.</span><span class="sxs-lookup"><span data-stu-id="ed00b-113">Being schema-free, the items in a container do not need to share the same structure or fields.</span></span>



    <span data-ttu-id="ed00b-114">Poiché i contenitori sono risorse dell'applicazione, può essere autorizzati tramite la chiave master o le chiavi di risorsa.</span><span class="sxs-lookup"><span data-stu-id="ed00b-114">Since containers are application resources, they can be authorized using either the master key or resource keys.</span></span>
  syntax:
    content: 'function createIfNotExists(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: <span data-ttu-id="ed00b-115">Rappresenta il corpo del contenitore.</span><span class="sxs-lookup"><span data-stu-id="ed00b-115">Represents the body of the container.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="ed00b-116">Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.</span><span class="sxs-lookup"><span data-stu-id="ed00b-116">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="ed00b-117">Esegue una query tutti i contenitori.</span><span class="sxs-lookup"><span data-stu-id="ed00b-117">Queries all containers.</span></span>
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: <span data-ttu-id="ed00b-118">Configurazione di query per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="ed00b-118">Query configuration for the operation.</span></span> <span data-ttu-id="ed00b-119">Vedere <xref:SqlQuerySpec> per altre informazioni su come configurare una query.</span><span class="sxs-lookup"><span data-stu-id="ed00b-119">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="ed00b-120">Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.</span><span class="sxs-lookup"><span data-stu-id="ed00b-120">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="ed00b-121">Leggere tutti i contenitori.</span><span class="sxs-lookup"><span data-stu-id="ed00b-121">Read all containers.</span></span>
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="ed00b-122">Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.</span><span class="sxs-lookup"><span data-stu-id="ed00b-122">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.ContainerDefinition'
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.SqlQuerySpec'
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
  - name: '>'
    fullName: '>'
