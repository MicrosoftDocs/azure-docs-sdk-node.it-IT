### YamlMime:UniversalReference
ms.openlocfilehash: 7202147c6c89f0015f6c9c5d602ffaeb968005da
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 12/13/2018
ms.locfileid: "52029495"
items:
- uid: '@azure/cosmos.Containers'
  name: Containers
  fullName: Containers
  children:
  - '@azure/cosmos.Containers.constructor'
  - '@azure/cosmos.Containers.create'
  - '@azure/cosmos.Containers.createIfNotExists'
  - '@azure/cosmos.Containers.database'
  - '@azure/cosmos.Containers.query'
  - '@azure/cosmos.Containers.query_1'
  - '@azure/cosmos.Containers.readAll'
  langs:
  - typeScript
  type: class
  summary: Operazioni per la creazione di nuovi contenitori e la lettura/esecuzione di query su tutti i contenitori
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.constructor'
  name: Containers(Database, ClientContext)
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Containers(database: Database, clientContext: ClientContext)'
    parameters:
    - id: database
      type:
      - '@azure/cosmos.Database'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.create'
  name: create(ContainerDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Crea un contenitore.

    Un contenitore è un contenitore logico denominato per gli elementi.


    Un database può contenere zero o più contenitori con nomi e ogni contenitore è costituito da zero o più elementi JSON.


    Sia privo di schema, gli elementi in un contenitore non sono necessario condividere la stessa struttura o i campi.



    Poiché i contenitori sono risorse dell'applicazione, può essere autorizzati tramite la chiave master o le chiavi di risorsa.
  syntax:
    content: 'function create(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: Rappresenta il corpo del contenitore.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.createIfNotExists'
  name: createIfNotExists(ContainerDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Controlla se un contenitore esiste e, in caso contrario, lo crea.

    In questo modo un'operazione di lettura in base all'id nel `body`, quindi, se non viene trovata, un'operazione di creazione.

    È necessario verificare che l'output corrisponda al corpo che è passato per le proprietà non predefinita (ad esempio indicizzazione criteri e così via.) Un contenitore è un contenitore logico denominato per gli elementi.


    Un database può contenere zero o più contenitori con nomi e ogni contenitore è costituito da zero o più elementi JSON.


    Sia privo di schema, gli elementi in un contenitore non sono necessario condividere la stessa struttura o i campi.



    Poiché i contenitori sono risorse dell'applicazione, può essere autorizzati tramite la chiave master o le chiavi di risorsa.
  syntax:
    content: 'function createIfNotExists(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: Rappresenta il corpo del contenitore.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Esegue una query tutti i contenitori.
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: Configurazione di query per l'operazione. Vedere <xref:SqlQuerySpec> per altre informazioni su come configurare una query.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<any>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query_1'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Esegue una query tutti i contenitori.
  syntax:
    content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: Configurazione di query per l'operazione. Vedere <xref:SqlQuerySpec> per altre informazioni su come configurare una query.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<T>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.readAll'
  name: readAll(FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Leggere tutti i contenitori.
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Utilizzare per impostare opzioni quali dimensioni di pagina di risposta, i token di continuazione e così via.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition & @azure/cosmos.Resource>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  name: Database
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.ContainerDefinition'
  name: ContainerDefinition
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.RequestOptions'
  name: RequestOptions
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  name: ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.SqlQuerySpec'
  name: SqlQuerySpec
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  name: FeedOptions
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<any>'
  name: QueryIterator<any>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <any>
    fullName: <any>
- uid: '@azure/cosmos.QueryIterator<T>'
  name: QueryIterator<T>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <T>
    fullName: <T>
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition & @azure/cosmos.Resource>'
  name: Resource>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
  - name: " & "
    fullName: " & "
  - name: Resource
    fullName: Resource
    uid: '@azure/cosmos.Resource'
  - name: '>'
    fullName: '>'
