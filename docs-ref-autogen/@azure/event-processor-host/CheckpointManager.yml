### YamlMime:UniversalReference
ms.openlocfilehash: a00377b11a0a4f5c6d2453d40f079b28cb2f6aff
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 12/13/2018
ms.locfileid: "52121119"
items:
- uid: '@azure/event-processor-host.CheckpointManager'
  name: CheckpointManager
  fullName: CheckpointManager
  children:
  - '@azure/event-processor-host.CheckpointManager.checkpointStoreExists'
  - '@azure/event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists'
  - '@azure/event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists'
  - '@azure/event-processor-host.CheckpointManager.deleteCheckpoint'
  - '@azure/event-processor-host.CheckpointManager.deleteCheckpointStore'
  - '@azure/event-processor-host.CheckpointManager.getCheckpoint'
  - '@azure/event-processor-host.CheckpointManager.updateCheckpoint'
  langs:
  - typeScript
  type: interface
  summary: ''
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.checkpointStoreExists'
  name: checkpointStoreExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="383bb-101">Esiste nell'archivio del punto di controllo?</span><span class="sxs-lookup"><span data-stu-id="383bb-101">Does the checkpoint store exist?</span></span>
  syntax:
    content: function checkpointStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists'
  name: createAllCheckpointsIfNotExists(string[])
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="383bb-102">Crea i titolari dei checkpoint per le partizioni specificate.</span><span class="sxs-lookup"><span data-stu-id="383bb-102">Creates the checkpoint HOLDERs for the given partitions.</span></span> <span data-ttu-id="383bb-103">Non esegue alcuna operazione per eventuali checkpoint titolari già esistenti.</span><span class="sxs-lookup"><span data-stu-id="383bb-103">Does nothing for any checkpoint HOLDERs that already exist.</span></span>

    <span data-ttu-id="383bb-104">La semantica di questo oggetto è complessa poiché è possibile usare lo stesso archivio per i lease e i checkpoint (l'implementazione di archiviazione di Azure eseguita) e deve essere presente un lease per ogni partizione ma non è necessario disporre di un checkpoint per una partizione.</span><span class="sxs-lookup"><span data-stu-id="383bb-104">The semantics of this are complicated because it is possible to use the same store for both leases and checkpoints (the Azure Storage implementation does so) and it is required to have a lease for every partition but it is not required to have a checkpoint for a partition.</span></span>

    <span data-ttu-id="383bb-105">È uno scenario valido a non usare mai i checkpoint, pertanto è importante per l'archivio distinguere tra la creazione di structure(s) che conterrà un checkpoint e creare effettivamente un checkpoint (archiviazione di una coppia di numeri di sequenza/offset della struttura).</span><span class="sxs-lookup"><span data-stu-id="383bb-105">It is a valid scenario to never use checkpoints at all, so it is important for the store to distinguish between creating the structure(s) that will hold a checkpoint and actually creating a checkpoint (storing an offset/sequence number pair in the structure).</span></span>
  syntax:
    content: 'function createAllCheckpointsIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: <span data-ttu-id="383bb-106">Elenco di partizioni per i titolari dei checkpoint per creare.</span><span class="sxs-lookup"><span data-stu-id="383bb-106">List of partitions to create checkpoint HOLDERs for.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists'
  name: createCheckpointStoreIfNotExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="383bb-107">Creare l'archivio di checkpoint, se non esiste.</span><span class="sxs-lookup"><span data-stu-id="383bb-107">Create the checkpoint store if it doesn't exist.</span></span> <span data-ttu-id="383bb-108">Non esegue alcuna operazione se esistente.</span><span class="sxs-lookup"><span data-stu-id="383bb-108">Does nothing if it exists.</span></span>
  syntax:
    content: function createCheckpointStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.deleteCheckpoint'
  name: deleteCheckpoint(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="383bb-109">Eliminare il checkpoint archiviato per la partizione specificata.</span><span class="sxs-lookup"><span data-stu-id="383bb-109">Delete the stored checkpoint for the given partition.</span></span> <span data-ttu-id="383bb-110">Se è presente alcun checkpoint archiviato per la partizione specifica, che viene considerata come completata.</span><span class="sxs-lookup"><span data-stu-id="383bb-110">If there is no stored checkpoint for the given partition, that is treated as success.</span></span> <span data-ttu-id="383bb-111">L'eliminazione del checkpoint titolare è consentito, ma non richiesto; l'implementazione è libera di eseguire qualunque sia il più pratico.</span><span class="sxs-lookup"><span data-stu-id="383bb-111">Deleting the checkpoint HOLDER is allowed but not required; your implementation is free to do whichever is more convenient.</span></span>
  syntax:
    content: 'function deleteCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: <span data-ttu-id="383bb-112">PartitionId per eliminare il checkpoint dallo store.</span><span class="sxs-lookup"><span data-stu-id="383bb-112">The partitionId to delete the checkpoint from the store.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.deleteCheckpointStore'
  name: deleteCheckpointStore()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="383bb-113">Elimina l'archivio di checkpoint.</span><span class="sxs-lookup"><span data-stu-id="383bb-113">Deletes the checkpoint store.</span></span>
  syntax:
    content: function deleteCheckpointStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.getCheckpoint'
  name: getCheckpoint(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="383bb-114">Ottiene le informazioni di checkpoint associate con la partizione specificata.</span><span class="sxs-lookup"><span data-stu-id="383bb-114">Gets the checkpoint info associated with the given partition.</span></span> <span data-ttu-id="383bb-115">Potrebbe restituire indefinito se non è stato creato alcun checkpoint per la partizione.</span><span class="sxs-lookup"><span data-stu-id="383bb-115">Could return undefined if no checkpoint has been created for that partition.</span></span>
  syntax:
    content: 'function getCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: <span data-ttu-id="383bb-116">PartitionId per ottenere le informazioni di checkpoint per.</span><span class="sxs-lookup"><span data-stu-id="383bb-116">The partitionId to get the checkpoint info for.</span></span>
    return:
      type:
      - Promise<@azure/event-processor-host.CheckpointInfo | undefined>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.updateCheckpoint'
  name: updateCheckpoint(CompleteLease, CheckpointInfo)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="383bb-117">Aggiornare il checkpoint nell'archivio con l'offset/sequenceNumber nel checkpoint specificato.</span><span class="sxs-lookup"><span data-stu-id="383bb-117">Update the checkpoint in the store with the offset/sequenceNumber in the provided checkpoint.</span></span>
  syntax:
    content: 'function updateCheckpoint(lease: CompleteLease, checkpoint: CheckpointInfo)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="383bb-118">Informazioni sulle partizioni in base al quale eseguire un checkpoint.</span><span class="sxs-lookup"><span data-stu-id="383bb-118">Partition information against which to perform a checkpoint.</span></span>
    - id: checkpoint
      type:
      - '@azure/event-processor-host.CheckpointInfo'
      description: <span data-ttu-id="383bb-119">offset/sequeceNumber per aggiornare l'archivio con</span><span class="sxs-lookup"><span data-stu-id="383bb-119">offset/sequeceNumber to update the store with</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
references:
- uid: Promise<@azure/event-processor-host.CheckpointInfo | undefined>
  name: CheckpointInfo | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: '@azure/event-processor-host.CheckpointInfo'
  - name: " | undefined>"
    fullName: " | undefined>"
- uid: '@azure/event-processor-host.CompleteLease'
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
- uid: '@azure/event-processor-host.CheckpointInfo'
  name: CheckpointInfo
  spec.typeScript:
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: '@azure/event-processor-host.CheckpointInfo'
