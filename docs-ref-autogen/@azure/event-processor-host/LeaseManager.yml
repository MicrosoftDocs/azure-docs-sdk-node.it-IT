### YamlMime:UniversalReference
ms.openlocfilehash: ed7f92526f273477e153fad3fe0ab03db0704f34
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 12/13/2018
ms.locfileid: "52104226"
items:
- uid: '@azure/event-processor-host.LeaseManager'
  name: LeaseManager
  fullName: LeaseManager
  children:
  - '@azure/event-processor-host.LeaseManager.acquireLease'
  - '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  - '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  - '@azure/event-processor-host.LeaseManager.deleteLease'
  - '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  - '@azure/event-processor-host.LeaseManager.getAllLeases'
  - '@azure/event-processor-host.LeaseManager.getLease'
  - '@azure/event-processor-host.LeaseManager.leaseDuration'
  - '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  - '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  - '@azure/event-processor-host.LeaseManager.releaseLease'
  - '@azure/event-processor-host.LeaseManager.renewLease'
  - '@azure/event-processor-host.LeaseManager.updateLease'
  langs:
  - typeScript
  type: interface
  summary: ''
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.acquireLease'
  name: acquireLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="977cc-101">Acquisire il lease per la partizione desiderata per questa EventProcessorHost.</span><span class="sxs-lookup"><span data-stu-id="977cc-101">Acquire the lease on the desired partition for this EventProcessorHost.</span></span>

    <span data-ttu-id="977cc-102">Si noti che è consentito di acquisire un lease già appartenente a un altro host.</span><span class="sxs-lookup"><span data-stu-id="977cc-102">Note that it is legal to acquire a lease that is already owned by another host.</span></span>

    <span data-ttu-id="977cc-103">Acquisizione del lease è come le partizioni vengono ridistribuite quando vengono avviati altri host.</span><span class="sxs-lookup"><span data-stu-id="977cc-103">Lease-stealing is how partitions are redistributed when additional hosts are started.</span></span>


    <span data-ttu-id="977cc-104">Implementazione dell'archiviazione di Azure esistente possono essere soggetti concorrenze tra due istanze dell'host si prova ad acquisire o rubare il lease nello stesso momento.</span><span class="sxs-lookup"><span data-stu-id="977cc-104">The existing Azure Storage implementation can experience races between two host instances attempting to acquire or steal the lease at the same time.</span></span> <span data-ttu-id="977cc-105">Per evitare situazioni in cui due istanze dell'host sia ritiene che possiedono il lease, acquisizione può avere esito negativo senza errori restituendo false e deve eseguire in modo che quando vi è alcun dubbio: il peggiore che possono verificarsi che alcuna istanza host non proprietario del lease per un breve periodo di tempo.</span><span class="sxs-lookup"><span data-stu-id="977cc-105">To avoid situations where two host instances both believe that they own the lease, acquisition can fail without errors by returning false and should do so when there is any doubt -- the worst that can happen is that no host instance owns the lease for a short time.</span></span> <span data-ttu-id="977cc-106">Ciò è qualitativo diverso, ad esempio, nell'archivio sottostante, generare un'eccezione di accesso, ovvero un errore.</span><span class="sxs-lookup"><span data-stu-id="977cc-106">This is qualitatively different from, for example, the underlying store throwing an access exception, which is an error.</span></span>
  syntax:
    content: 'function acquireLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="977cc-107">Informazioni per la partizione desiderata ottenuta in precedenza da assegnare in lease `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="977cc-107">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  name: createAllLeasesIfNotExists(string[])
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="977cc-108">Creare l'archivio le info di lease per partizione specificata, se non esiste.</span><span class="sxs-lookup"><span data-stu-id="977cc-108">Create in the store the lease info for the given partition, if it does not exist.</span></span> <span data-ttu-id="977cc-109">Non eseguire alcuna operazione se esiste già nell'archivio.</span><span class="sxs-lookup"><span data-stu-id="977cc-109">Do nothing if it does exist in the store already.</span></span>
  syntax:
    content: 'function createAllLeasesIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: <span data-ttu-id="977cc-110">ID delle partizioni da creare informazioni di lease per</span><span class="sxs-lookup"><span data-stu-id="977cc-110">ids of partitions to create lease info for</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  name: createLeaseStoreIfNotExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="977cc-111">Creare l'archivio di lease se non esiste.</span><span class="sxs-lookup"><span data-stu-id="977cc-111">Create the lease store if it doesn't exist.</span></span> <span data-ttu-id="977cc-112">Non eseguire alcuna operazione se esiste.</span><span class="sxs-lookup"><span data-stu-id="977cc-112">Do nothing if it does exist.</span></span>
  syntax:
    content: function createLeaseStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLease'
  name: deleteLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="977cc-113">Elimina le info di lease per partizione specificata dall'archivio.</span><span class="sxs-lookup"><span data-stu-id="977cc-113">Delete the lease info for the given partition from the store.</span></span> <span data-ttu-id="977cc-114">Se è presente alcun lease archiviato per la partizione specifica, che viene considerata come completata.</span><span class="sxs-lookup"><span data-stu-id="977cc-114">If there is no stored lease for the given partition, that is treated as success.</span></span>
  syntax:
    content: 'function deleteLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="977cc-115">Informazioni per la partizione desiderata ottenuta in precedenza da assegnare in lease `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="977cc-115">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  name: deleteLeaseStore()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="977cc-116">Eliminare l'archivio di lease.</span><span class="sxs-lookup"><span data-stu-id="977cc-116">Delete lease store.</span></span>
  syntax:
    content: function deleteLeaseStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getAllLeases'
  name: getAllLeases()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="977cc-117">Restituisce BaseLease leggero per tutti i lease, che include il nome del proprietario host e se lease è scaduto.</span><span class="sxs-lookup"><span data-stu-id="977cc-117">Returns lightweight BaseLease for all leases, which includes name of owning host and whether lease is expired.</span></span> <span data-ttu-id="977cc-118">Un'implementazione è gratuita restituire CompleteLease o la propria classe derivata da CompleteLease, ma è importante che getAllLeases eseguito più velocemente possibile.</span><span class="sxs-lookup"><span data-stu-id="977cc-118">An implementation is free to return CompleteLease or its own class derived from CompleteLease, but it is important that getAllLeases run as fast as possible.</span></span> <span data-ttu-id="977cc-119">Se è più veloce per ottenere solo le informazioni necessarie per un BaseLease, è fortemente consigliabile farlo.</span><span class="sxs-lookup"><span data-stu-id="977cc-119">If it is faster to obtain only the information required for a BaseLease, we heavily recommend doing that.</span></span>
  syntax:
    content: function getAllLeases()
    parameters: []
    return:
      type:
      - Promise<@azure/event-processor-host.BaseLease[]>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getLease'
  name: getLease(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="977cc-120">Ottiene le informazioni di lease per la partizione specificata.</span><span class="sxs-lookup"><span data-stu-id="977cc-120">Gets the lease info for the specified partition.</span></span> <span data-ttu-id="977cc-121">Può restituire `undefined` se nessun lease è stato creato nell'archivio per la partizione specificata.</span><span class="sxs-lookup"><span data-stu-id="977cc-121">Can return `undefined` if no lease has been created in the store for the specified partition.</span></span>
  syntax:
    content: 'function getLease(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: <span data-ttu-id="977cc-122">Id di partizione per ottenere il lease.</span><span class="sxs-lookup"><span data-stu-id="977cc-122">Partition id to get the lease for.</span></span>
    return:
      type:
      - Promise<@azure/event-processor-host.CompleteLease | undefined>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseDuration'
  name: leaseDuration
  fullName: leaseDuration
  children: []
  langs:
  - typeScript
  type: property
  summary: <span data-ttu-id="977cc-123">{number} leaseDuration durata del lease **in pochi secondi** prima della scadenza, a meno che rinnovato.</span><span class="sxs-lookup"><span data-stu-id="977cc-123">{number} leaseDuration Duration of a lease **in seconds** before it expires unless renewed.</span></span>
  syntax:
    content: 'leaseDuration: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  name: leaseRenewInterval
  fullName: leaseRenewInterval
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    <span data-ttu-id="977cc-124">{number} leaseRenewInterval l'intervallo di sospensione **in pochi secondi** tra le analisi.</span><span class="sxs-lookup"><span data-stu-id="977cc-124">{number} leaseRenewInterval The sleep interval **in seconds** between scans.</span></span>


    <span data-ttu-id="977cc-125">Consente a un'implementazione di manager di lease specificare a PartitionManager frequenza dovrebbe analizzare i lease e rinnovarli.</span><span class="sxs-lookup"><span data-stu-id="977cc-125">Allows a lease manager implementation to specify to PartitionManager how often it should scan leases and renew them.</span></span> <span data-ttu-id="977cc-126">Per ridistribuire i lease in modo tempestivo dopo che un host non è più operativo, è consigliabile un intervallo relativamente breve, ad esempio dieci secondi.</span><span class="sxs-lookup"><span data-stu-id="977cc-126">In order to redistribute leases in a timely fashion after a host ceases operating, we recommend a relatively short interval, such as ten seconds.</span></span> <span data-ttu-id="977cc-127">Ovviamente è necessario renderla meno della metà della lunghezza del lease, per impedire la scadenza accidentale.</span><span class="sxs-lookup"><span data-stu-id="977cc-127">Obviously it should be less than half of the lease length, to prevent accidental expiration.</span></span>
  syntax:
    content: 'leaseRenewInterval: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  name: leaseStoreExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="977cc-128">Esiste nell'archivio di lease?</span><span class="sxs-lookup"><span data-stu-id="977cc-128">Does the lease store exist?</span></span>
  syntax:
    content: function leaseStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.releaseLease'
  name: releaseLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="977cc-129">Tralasciare un lease utilizzato attualmente da questo host.</span><span class="sxs-lookup"><span data-stu-id="977cc-129">Give up a lease currently held by this host.</span></span>

    <span data-ttu-id="977cc-130">Se il lease è stato rubato o se scaduto, rilascio non è necessario e avrà esito negativo se si tenta.</span><span class="sxs-lookup"><span data-stu-id="977cc-130">If the lease has been stolen, or expired, releasing it is unnecessary, and will fail if attempted.</span></span>
  syntax:
    content: 'function releaseLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="977cc-131">Informazioni per la partizione desiderata ottenuta in precedenza da assegnare in lease `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="977cc-131">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.renewLease'
  name: renewLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="977cc-132">Rinnovare un lease utilizzato attualmente da questo host.</span><span class="sxs-lookup"><span data-stu-id="977cc-132">Renew a lease currently held by this host.</span></span>

    <span data-ttu-id="977cc-133">Se il lease è stato usato da un'altra istanza dell'host (rubata o dopo la scadenza) o rilasciato in modo esplicito, renewLease deve restituire false.</span><span class="sxs-lookup"><span data-stu-id="977cc-133">If the lease has been taken by another host instance (either stolen or after expiration) or explicitly released, renewLease must return false.</span></span> <span data-ttu-id="977cc-134">Con l'implementazione basata su archiviazione di Azure, è possibile rinnovare un lease scaduto che non è stato eseguito da un altro host, pertanto è possibile consentire che l'implementazione oppure No, a seconda del valore è comodo.</span><span class="sxs-lookup"><span data-stu-id="977cc-134">With the Azure Storage-based implementation, it IS possible to renew an expired lease that has not been taken by another host, so your implementation can allow that or not, whichever is convenient.</span></span> <span data-ttu-id="977cc-135">Se non esiste, renewLease deve restituire false.</span><span class="sxs-lookup"><span data-stu-id="977cc-135">If it does not, renewLease should return false.</span></span>
  syntax:
    content: 'function renewLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="977cc-136">lease da rinnovare.</span><span class="sxs-lookup"><span data-stu-id="977cc-136">lease to be renewed.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.updateLease'
  name: updateLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="977cc-137">Aggiornare l'archivio con le informazioni contenute nel lease specificato.</span><span class="sxs-lookup"><span data-stu-id="977cc-137">Update the store with the information in the provided lease.</span></span>

    <span data-ttu-id="977cc-138">È necessario contenere attualmente un lease per aggiornarla.</span><span class="sxs-lookup"><span data-stu-id="977cc-138">It is necessary to currently hold a lease in order to update it.</span></span> <span data-ttu-id="977cc-139">Se il lease è stato rubato o scaduti o il rilascio, non può essere aggiornata.</span><span class="sxs-lookup"><span data-stu-id="977cc-139">If the lease has been stolen, or expired, or released, it cannot be updated.</span></span> <span data-ttu-id="977cc-140">Le implementazioni di manager di lease devono rinnovare il lease prima di eseguire l'aggiornamento per evitare la scadenza del lease durante il processo.</span><span class="sxs-lookup"><span data-stu-id="977cc-140">Lease manager implementations should renew the lease before performing the update to avoid lease expiration during the process.</span></span>
  syntax:
    content: 'function updateLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="977cc-141">Nuove informazioni di lease da archiviare.</span><span class="sxs-lookup"><span data-stu-id="977cc-141">New lease information to be stored.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
references:
- uid: '@azure/event-processor-host.CompleteLease'
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
- uid: Promise<@azure/event-processor-host.BaseLease[]>
  name: BaseLease[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: BaseLease
    fullName: BaseLease
    uid: '@azure/event-processor-host.BaseLease'
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<@azure/event-processor-host.CompleteLease | undefined>
  name: CompleteLease | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
  - name: " | undefined>"
    fullName: " | undefined>"
