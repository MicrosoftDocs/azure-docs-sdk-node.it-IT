### YamlMime:UniversalReference
ms.openlocfilehash: 6ba5ac3c693177f8af42e6a22afe2d7805016620
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 12/13/2018
ms.locfileid: "52095626"
items:
- uid: '@azure/event-processor-host.EventProcessorHost'
  name: EventProcessorHost
  fullName: EventProcessorHost
  children:
  - '@azure/event-processor-host.EventProcessorHost.consumerGroup'
  - '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentials'
  - '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createFromConnectionString'
  - '@azure/event-processor-host.EventProcessorHost.createFromConnectionStringWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionString'
  - '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createFromTokenProvider'
  - '@azure/event-processor-host.EventProcessorHost.createFromTokenProviderWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createHostName'
  - '@azure/event-processor-host.EventProcessorHost.constructor'
  - '@azure/event-processor-host.EventProcessorHost.getHubRuntimeInformation'
  - '@azure/event-processor-host.EventProcessorHost.getPartitionIds'
  - '@azure/event-processor-host.EventProcessorHost.getPartitionInformation'
  - '@azure/event-processor-host.EventProcessorHost.hostName'
  - '@azure/event-processor-host.EventProcessorHost.receivingFromPartitions'
  - '@azure/event-processor-host.EventProcessorHost.start'
  - '@azure/event-processor-host.EventProcessorHost.stop'
  langs:
  - typeScript
  type: class
  summary: Descrive l'Host processore di eventi per elaborare gli eventi da un hub eventi.
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.consumerGroup'
  name: consumerGroup
  fullName: consumerGroup
  children: []
  langs:
  - typeScript
  type: property
  summary: Fornisce il consumer nome del gruppo per l'host processore di eventi.
  syntax:
    content: 'consumerGroup: string'
    return:
      type:
      - string
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentials'
  name: createFromAadTokenCredentials(string, string, string, string, string, ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un'istanza di EventProcessorHost dalle credenziali del token AAD.
  syntax:
    content: 'static function createFromAadTokenCredentials(hostName: string, storageConnectionString: string, storageContainerName: string, namespace: string, eventHubPath: string, credentials: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome dell'host del processore. DEVE ESSERE UNIVOCO.

        Fortemente consigliabile includere un prefisso con un guid o un Guid per garantire l'univocità. È possibile usare `EventProcessorHost.createHostName("your-prefix")`; Valore predefinito: `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Stringa di connessione all'account di archiviazione di Azure usato per i lease e creazione di checkpoint. Esempio DefaultEndpointsProtocol = https; AccountName = < account-name >; AccountKey = < account-key >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Nome del contenitore archiviazione Azure per l'utilizzo dal gestore di lease e dei checkpoint predefinito.
    - id: namespace
      type:
      - string
      description: >-
        Nome di dominio completo per gli hub eventi.

        Esempio: "{your-sb-namespace}. amp;#42;.ServiceBus.Windows.NET"
    - id: eventHubPath
      type:
      - string
      description: Nome dell'hub eventi.
    - id: credentials
      type:
      - ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials
      description: 'Le credenziali del Token di AAD. Può essere uno dei seguenti: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials.'
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager'
  name: createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager(string, string, string, ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, CheckpointManager, LeaseManager, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un'istanza di EventProcessorHost dalle credenziali del token AAD con il manager di checkpoint specificato e un gestore di lease.
  syntax:
    content: 'static function createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager(hostName: string, namespace: string, eventHubPath: string, credentials: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome dell'host del processore. DEVE ESSERE UNIVOCO.

        Fortemente consigliabile includere un prefisso con un guid o un Guid per garantire l'univocità. È possibile usare `EventProcessorHost.createHostName("your-prefix")`; Valore predefinito: `js-host-${uuid()}`.
    - id: namespace
      type:
      - string
      description: >-
        Nome di dominio completo per gli hub eventi.

        Esempio: "{your-sb-namespace}. amp;#42;.ServiceBus.Windows.NET"
    - id: eventHubPath
      type:
      - string
      description: Nome dell'hub eventi.
    - id: credentials
      type:
      - ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials
      description: 'Le credenziali del Token di AAD. Può essere uno dei seguenti: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials.'
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Gestore per gestire i checkpoint.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Gestore per la gestione dei lease.
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromConnectionString'
  name: createFromConnectionString(string, string, string, string, FromConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un'istanza di EventProcessorHost dalla stringa di connessione dell'hub eventi.
  syntax:
    content: 'static function createFromConnectionString(hostName: string, storageConnectionString: string, storageContainerName: string, eventHubConnectionString: string, options?: FromConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome dell'host del processore. DEVE ESSERE UNIVOCO.

        Fortemente consigliabile includere un prefisso con un guid o un Guid per garantire l'univocità. È possibile usare `EventProcessorHost.createHostName("your-prefix")`; Valore predefinito: `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Stringa di connessione all'account di archiviazione di Azure usato per i lease e creazione di checkpoint. Esempio DefaultEndpointsProtocol = https; AccountName = < account-name >; AccountKey = < account-key >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Nome del contenitore archiviazione Azure per l'utilizzo dal gestore di lease e dei checkpoint predefinito.
    - id: eventHubConnectionString
      type:
      - string
      description: >-
        Stringa di connessione per l'Hub eventi ricevere da.

        Esempio: ' Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/; SharedAccessKeyName = my-SA-name; SharedAccessKey = my-SA-key'
    - id: options
      type:
      - '@azure/event-processor-host.FromConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromConnectionStringWithCustomCheckpointAndLeaseManager'
  name: createFromConnectionStringWithCustomCheckpointAndLeaseManager(string, string, CheckpointManager, LeaseManager, FromConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un'istanza di EventProcessorHost dalla stringa di connessione dell'hub eventi con la gestione checkpoint specificato e il gestore di lease.
  syntax:
    content: 'static function createFromConnectionStringWithCustomCheckpointAndLeaseManager(hostName: string, eventHubConnectionString: string, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome dell'host del processore. DEVE ESSERE UNIVOCO.

        Fortemente consigliabile includere un prefisso con un guid o un Guid per garantire l'univocità. È possibile usare `EventProcessorHost.createHostName("your-prefix")`; Valore predefinito: `js-host-${uuid()}`.
    - id: eventHubConnectionString
      type:
      - string
      description: >-
        Stringa di connessione per l'Hub eventi ricevere da.

        Esempio: ' Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/; SharedAccessKeyName = my-SA-name; SharedAccessKey = my-SA-key'
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Gestore per gestire i checkpoint.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Gestore per la gestione dei lease.
    - id: options
      type:
      - '@azure/event-processor-host.FromConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionString'
  name: createFromIotHubConnectionString(string, string, string, string, FromIotHubConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un'istanza di EventProcessorHost dalla stringa di connessione IotHub.
  syntax:
    content: 'static function createFromIotHubConnectionString(hostName: string, storageConnectionString: string, storageContainerName: string, iotHubConnectionString: string, options?: FromIotHubConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome dell'host del processore. DEVE ESSERE UNIVOCO.

        Fortemente consigliabile includere un prefisso con un guid o un Guid per garantire l'univocità. È possibile usare `EventProcessorHost.createHostName("your-prefix")`; Valore predefinito: `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Stringa di connessione all'account di archiviazione di Azure usato per i lease e creazione di checkpoint. Esempio DefaultEndpointsProtocol = https; AccountName = < account-name >; AccountKey = < account-key >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Nome del contenitore archiviazione Azure per l'utilizzo dal gestore di lease e dei checkpoint predefinito.
    - id: iotHubConnectionString
      type:
      - string
      description: >-
        Stringa di connessione per l'hub IOT.

        Esempio: "Endpoint = nome-host-iot; SharedAccessKeyName = my-SA-name; SharedAccessKey = my-SA-key'
    - id: options
      type:
      - '@azure/event-processor-host.FromIotHubConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/event-processor-host.EventProcessorHost>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager'
  name: createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager(string, string, CheckpointManager, LeaseManager, FromIotHubConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un'istanza di EventProcessorHost dalla stringa di connessione IotHub con il manager di checkpoint specificato e un gestore di lease.
  syntax:
    content: 'static function createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager(hostName: string, iotHubConnectionString: string, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromIotHubConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome dell'host del processore. DEVE ESSERE UNIVOCO.

        Fortemente consigliabile includere un prefisso con un guid o un Guid per garantire l'univocità. È possibile usare `EventProcessorHost.createHostName("your-prefix")`; Valore predefinito: `js-host-${uuid()}`.
    - id: iotHubConnectionString
      type:
      - string
      description: >-
        Stringa di connessione per l'hub IOT.

        Esempio: "Endpoint = nome-host-iot; SharedAccessKeyName = my-SA-name; SharedAccessKey = my-SA-key'
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Gestore per gestire i checkpoint.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Gestore per la gestione dei lease.
    - id: options
      type:
      - '@azure/event-processor-host.FromIotHubConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/event-processor-host.EventProcessorHost>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromTokenProvider'
  name: createFromTokenProvider(string, string, string, string, string, TokenProvider, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un'istanza di EventProcessorHost da un oggetto TokenProvider.
  syntax:
    content: 'static function createFromTokenProvider(hostName: string, storageConnectionString: string, storageContainerName: string, namespace: string, eventHubPath: string, tokenProvider: TokenProvider, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome dell'host del processore. DEVE ESSERE UNIVOCO.

        Fortemente consigliabile includere un prefisso con un guid o un Guid per garantire l'univocità. È possibile usare `EventProcessorHost.createHostName("your-prefix")`; Valore predefinito: `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Stringa di connessione all'account di archiviazione di Azure usato per i lease e creazione di checkpoint. Esempio DefaultEndpointsProtocol = https; AccountName = < account-name >; AccountKey = < account-key >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Nome del contenitore archiviazione Azure per l'utilizzo dal gestore di lease e dei checkpoint predefinito.
    - id: namespace
      type:
      - string
      description: >-
        Nome di dominio completo per gli hub eventi.

        Esempio: "{your-sb-namespace}. amp;#42;.ServiceBus.Windows.NET"
    - id: eventHubPath
      type:
      - string
      description: Nome dell'hub eventi.
    - id: tokenProvider
      type:
      - TokenProvider
      description: Il provider di token che implementa l'interfaccia TokenProvider.
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromTokenProviderWithCustomCheckpointAndLeaseManager'
  name: createFromTokenProviderWithCustomCheckpointAndLeaseManager(string, string, string, TokenProvider, CheckpointManager, LeaseManager, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un'istanza di EventProcessorHost da un oggetto TokenProvider con la gestione checkpoint specificato e il gestore di lease.
  syntax:
    content: 'static function createFromTokenProviderWithCustomCheckpointAndLeaseManager(hostName: string, namespace: string, eventHubPath: string, tokenProvider: TokenProvider, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome dell'host del processore. DEVE ESSERE UNIVOCO.

        Fortemente consigliabile includere un prefisso con un guid o un Guid per garantire l'univocità. È possibile usare `EventProcessorHost.createHostName("your-prefix")`; Valore predefinito: `js-host-${uuid()}`.
    - id: namespace
      type:
      - string
      description: >-
        Nome di dominio completo per gli hub eventi.

        Esempio: "{your-sb-namespace}. amp;#42;.ServiceBus.Windows.NET"
    - id: eventHubPath
      type:
      - string
      description: Nome dell'hub eventi.
    - id: tokenProvider
      type:
      - TokenProvider
      description: Il provider di token che implementa l'interfaccia TokenProvider.
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Gestore per gestire i checkpoint.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Gestore per la gestione dei lease.
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createHostName'
  name: createHostName(undefined | string)
  children: []
  type: method
  langs:
  - typeScript
  summary: Metodo pratico per la generazione del nome host univoco.
  syntax:
    content: 'static function createHostName(prefix?: undefined | string)'
    parameters:
    - id: prefix
      type:
      - undefined | string
      description: ''
      optional: true
    return:
      type:
      - string
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.constructor'
  name: EventProcessorHost(string, EventProcessorHostOptions)
  children: []
  type: constructor
  langs:
  - typeScript
  summary: Crea un nuovo host per elaborare gli eventi da un Hub eventi.
  syntax:
    content: 'new EventProcessorHost(hostName: string, options?: EventProcessorHostOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Nome dell'host del processore. DEVE ESSERE UNIVOCO.

        Fortemente consigliabile includere un prefisso con un guid o un Guid per garantire l'univocità. È possibile usare `EventProcessorHost.createHostName("your-prefix")`; Valore predefinito: `js-host-${uuid()}`.
    - id: options
      type:
      - '@azure/event-processor-host.EventProcessorHostOptions'
      description: ''
      optional: true
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.getHubRuntimeInformation'
  name: getHubRuntimeInformation()
  children: []
  type: method
  langs:
  - typeScript
  summary: Fornisce le informazioni di runtime di hub eventi.
  syntax:
    content: function getHubRuntimeInformation()
    parameters: []
    return:
      type:
      - Promise<EventHubRuntimeInformation>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.getPartitionIds'
  name: getPartitionIds()
  children: []
  type: method
  langs:
  - typeScript
  summary: Fornisce una matrice di partitionIds.
  syntax:
    content: function getPartitionIds()
    parameters: []
    return:
      type:
      - Promise<string[]>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.getPartitionInformation'
  name: getPartitionInformation(string | number)
  children: []
  type: method
  langs:
  - typeScript
  summary: Vengono fornite informazioni sulla partizione specificata.
  syntax:
    content: 'function getPartitionInformation(partitionId: string | number)'
    parameters:
    - id: partitionId
      type:
      - string | number
      description: >
        ID di partizione per la partizione in cui sono richieste informazioni.
    return:
      type:
      - Promise<EventHubPartitionRuntimeInformation>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.hostName'
  name: hostName
  fullName: hostName
  children: []
  langs:
  - typeScript
  type: property
  summary: Fornisce il nome host per l'host processore di eventi.
  syntax:
    content: 'hostName: string'
    return:
      type:
      - string
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.receivingFromPartitions'
  name: receivingFromPartitions
  fullName: receivingFromPartitions
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    Fornisce un elenco di partizioni da che di EPH attualmente sta ricevendo messaggi.

    Il EPH tenterà di acquisire i lease per più partizioni durante ogni analisi che si verifica una volta ogni lease (configurato) rinnovare secondi. Il numero di istanze EPH che vengono eseguiti simultaneamente per ricevere i messaggi dallo stesso gruppo di consumer all'interno di un hub eventi influisce anche il numero di partizioni che questa istanza di EPH riceva attivamente i messaggi da.
  syntax:
    content: 'receivingFromPartitions: string[]'
    return:
      type:
      - string[]
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.start'
  name: start(OnReceivedMessage, OnReceivedError)
  children: []
  type: method
  langs:
  - typeScript
  summary: Avvia l'host processore di eventi, il recupero dell'elenco di partizioni, e si tenta di recuperare i lease per ogni lease ha esito positivo, verrà ottenere i dettagli del BLOB e avviare un ricevitore nel punto in cui è stata interrotta in precedenza.
  syntax:
    content: 'function start(onMessage: OnReceivedMessage, onError: OnReceivedError)'
    parameters:
    - id: onMessage
      type:
      - '@azure/event-processor-host.OnReceivedMessage'
      description: ''
    - id: onError
      type:
      - '@azure/event-processor-host.OnReceivedError'
      description: ''
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.stop'
  name: stop()
  children: []
  type: method
  langs:
  - typeScript
  summary: Arresta EventProcessorHost dall'elaborazione di messaggi.
  syntax:
    content: function stop()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
references:
- uid: '@azure/event-processor-host.EventProcessorHostOptions'
  name: EventProcessorHostOptions
  spec.typeScript:
  - name: EventProcessorHostOptions
    fullName: EventProcessorHostOptions
    uid: '@azure/event-processor-host.EventProcessorHostOptions'
- uid: '@azure/event-processor-host.OnReceivedMessage'
  name: OnReceivedMessage
  spec.typeScript:
  - name: OnReceivedMessage
    fullName: OnReceivedMessage
    uid: '@azure/event-processor-host.OnReceivedMessage'
- uid: '@azure/event-processor-host.OnReceivedError'
  name: OnReceivedError
  spec.typeScript:
  - name: OnReceivedError
    fullName: OnReceivedError
    uid: '@azure/event-processor-host.OnReceivedError'
- uid: '@azure/event-processor-host.FromTokenProviderOptions'
  name: FromTokenProviderOptions
  spec.typeScript:
  - name: FromTokenProviderOptions
    fullName: FromTokenProviderOptions
    uid: '@azure/event-processor-host.FromTokenProviderOptions'
- uid: '@azure/event-processor-host.EventProcessorHost'
  name: EventProcessorHost
  spec.typeScript:
  - name: EventProcessorHost
    fullName: EventProcessorHost
    uid: '@azure/event-processor-host.EventProcessorHost'
- uid: '@azure/event-processor-host.CheckpointManager'
  name: CheckpointManager
  spec.typeScript:
  - name: CheckpointManager
    fullName: CheckpointManager
    uid: '@azure/event-processor-host.CheckpointManager'
- uid: '@azure/event-processor-host.LeaseManager'
  name: LeaseManager
  spec.typeScript:
  - name: LeaseManager
    fullName: LeaseManager
    uid: '@azure/event-processor-host.LeaseManager'
- uid: '@azure/event-processor-host.FromConnectionStringOptions'
  name: FromConnectionStringOptions
  spec.typeScript:
  - name: FromConnectionStringOptions
    fullName: FromConnectionStringOptions
    uid: '@azure/event-processor-host.FromConnectionStringOptions'
- uid: '@azure/event-processor-host.FromIotHubConnectionStringOptions'
  name: FromIotHubConnectionStringOptions
  spec.typeScript:
  - name: FromIotHubConnectionStringOptions
    fullName: FromIotHubConnectionStringOptions
    uid: '@azure/event-processor-host.FromIotHubConnectionStringOptions'
- uid: Promise<@azure/event-processor-host.EventProcessorHost>
  name: EventProcessorHost>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: EventProcessorHost
    fullName: EventProcessorHost
    uid: '@azure/event-processor-host.EventProcessorHost'
  - name: '>'
    fullName: '>'
