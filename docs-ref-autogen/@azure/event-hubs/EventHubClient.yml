### YamlMime:UniversalReference
ms.openlocfilehash: 8d938a3c6a00b78d7c7dfd44eebfa476424900af
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 12/13/2018
ms.locfileid: "52042606"
items:
- uid: '@azure/event-hubs.EventHubClient'
  name: EventHubClient
  fullName: EventHubClient
  children:
  - '@azure/event-hubs.EventHubClient.close'
  - '@azure/event-hubs.EventHubClient.connectionId'
  - '@azure/event-hubs.EventHubClient.createFromAadTokenCredentials'
  - '@azure/event-hubs.EventHubClient.createFromConnectionString'
  - '@azure/event-hubs.EventHubClient.createFromIotHubConnectionString'
  - '@azure/event-hubs.EventHubClient.createFromTokenProvider'
  - '@azure/event-hubs.EventHubClient.constructor'
  - '@azure/event-hubs.EventHubClient.eventhubName'
  - '@azure/event-hubs.EventHubClient.getHubRuntimeInformation'
  - '@azure/event-hubs.EventHubClient.getPartitionIds'
  - '@azure/event-hubs.EventHubClient.getPartitionInformation'
  - '@azure/event-hubs.EventHubClient.receive'
  - '@azure/event-hubs.EventHubClient.receiveBatch'
  - '@azure/event-hubs.EventHubClient.send'
  - '@azure/event-hubs.EventHubClient.sendBatch'
  langs:
  - typeScript
  type: class
  summary: ''
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.close'
  name: close()
  children: []
  type: method
  langs:
  - typeScript
  summary: Chiude la connessione AMQP per l'Hub eventi per questo client, la restituzione di un suggerimento che viene risolto quando viene completata la disconnessione.
  syntax:
    content: function close()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.connectionId'
  name: connectionId
  fullName: connectionId
  children: []
  langs:
  - typeScript
  type: property
  summary: "{string} [connectionId] Id connessione amqp che identifica in modo univoco la connessione all'interno di un processo."
  optional: true
  syntax:
    content: 'connectionId?: undefined | string'
    return:
      type:
      - undefined | string
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.createFromAadTokenCredentials'
  name: createFromAadTokenCredentials(string, string, ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, ClientOptionsBase)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un Client di hub eventi da AADTokenCredentials.
  syntax:
    content: 'static function createFromAadTokenCredentials(host: string, entityPath: string, credentials: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, options?: ClientOptionsBase)'
    parameters:
    - id: host
      type:
      - string
      description: Nome di dominio completo per gli hub eventi. Molto probabilmente, <yournamespace>. servicebus.windows.net
    - id: entityPath
      type:
      - string
      description: Percorso dell'hub eventi del modulo 'my-eventi-hub-name'
    - id: credentials
      type:
      - ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials
      description: 'Le credenziali del Token di AAD. Può essere uno dei seguenti: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials.'
    - id: options
      type:
      - '@azure/event-hubs.ClientOptionsBase'
      description: Le opzioni che possono essere specificate durante la creazione di client.
      optional: true
    return:
      type:
      - '@azure/event-hubs.EventHubClient'
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.createFromConnectionString'
  name: createFromConnectionString(string, undefined | string, ClientOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un Client di hub eventi dalla stringa di connessione.
  syntax:
    content: 'static function createFromConnectionString(connectionString: string, path?: undefined | string, options?: ClientOptions)'
    parameters:
    - id: connectionString
      type:
      - string
      description: Stringa di connessione nel formato ' Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/; SharedAccessKeyName = my-SA-name; SharedAccessKey = my-SA-key'
    - id: path
      type:
      - undefined | string
      description: ''
      optional: true
    - id: options
      type:
      - '@azure/event-hubs.ClientOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-hubs.EventHubClient'
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.createFromIotHubConnectionString'
  name: createFromIotHubConnectionString(string, ClientOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un Client di hub eventi dalla stringa di connessione.
  syntax:
    content: 'static function createFromIotHubConnectionString(iothubConnectionString: string, options?: ClientOptions)'
    parameters:
    - id: iothubConnectionString
      type:
      - string
      description: Stringa di connessione nel formato ' HostName = nome-host-iot; SharedAccessKeyName = my-SA-name; SharedAccessKey = my-SA-key'
    - id: options
      type:
      - '@azure/event-hubs.ClientOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/event-hubs.EventHubClient>
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.createFromTokenProvider'
  name: createFromTokenProvider(string, string, TokenProvider, ClientOptionsBase)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un Client di hub eventi da un provider di token generico.
  syntax:
    content: 'static function createFromTokenProvider(host: string, entityPath: string, tokenProvider: TokenProvider, options?: ClientOptionsBase)'
    parameters:
    - id: host
      type:
      - string
      description: Nome di dominio completo per gli hub eventi. Molto probabilmente, <yournamespace>. servicebus.windows.net
    - id: entityPath
      type:
      - string
      description: Percorso dell'hub eventi del modulo 'my-eventi-hub-name'
    - id: tokenProvider
      type:
      - TokenProvider
      description: Il provider di token che implementa l'interfaccia TokenProvider.
    - id: options
      type:
      - '@azure/event-hubs.ClientOptionsBase'
      description: Le opzioni che possono essere specificate durante la creazione di client.
      optional: true
    return:
      type:
      - '@azure/event-hubs.EventHubClient'
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.constructor'
  name: EventHubClient(EventHubConnectionConfig, ClientOptions)
  children: []
  type: constructor
  langs:
  - typeScript
  summary: Crea un'istanza di un client che punta all'Hub eventi specificato da questa configurazione.
  syntax:
    content: 'new EventHubClient(config: EventHubConnectionConfig, options?: ClientOptions)'
    parameters:
    - id: config
      type:
      - EventHubConnectionConfig
      description: Configurazione della connessione per creare il Client di hub eventi.
    - id: options
      type:
      - '@azure/event-hubs.ClientOptions'
      description: >
        I parametri facoltativi che possono essere forniti al costruttore del Client di hub eventi.
      optional: true
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.eventhubName'
  name: eventhubName
  fullName: eventhubName
  children: []
  langs:
  - typeScript
  type: property
  summary: "{stringa} eventhubName il nome dell'hub eventi."
  syntax:
    content: 'eventhubName: string'
    return:
      type:
      - string
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.getHubRuntimeInformation'
  name: getHubRuntimeInformation()
  children: []
  type: method
  langs:
  - typeScript
  summary: Fornisce le informazioni di runtime di hub eventi.
  syntax:
    content: function getHubRuntimeInformation()
    parameters: []
    return:
      type:
      - Promise<@azure/event-hubs.EventHubRuntimeInformation>
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.getPartitionIds'
  name: getPartitionIds()
  children: []
  type: method
  langs:
  - typeScript
  summary: Fornisce una matrice di partitionIds.
  syntax:
    content: function getPartitionIds()
    parameters: []
    return:
      type:
      - Promise<Array<string>>
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.getPartitionInformation'
  name: getPartitionInformation(string | number)
  children: []
  type: method
  langs:
  - typeScript
  summary: Vengono fornite informazioni sulla partizione specificata.
  syntax:
    content: 'function getPartitionInformation(partitionId: string | number)'
    parameters:
    - id: partitionId
      type:
      - string | number
      description: ID di partizione per la partizione in cui sono richieste informazioni.
    return:
      type:
      - Promise<@azure/event-hubs.EventHubPartitionRuntimeInformation>
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.receive'
  name: receive(string | number, OnMessage, OnError, ReceiveOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Avvia il ricevitore per stabilire una sessione AMQP e un collegamento ricevitore AMQP nella sessione. I messaggi verranno passati al gestore onMessage fornito ed errore verrà passato al gestore onError fornito.
  syntax:
    content: 'function receive(partitionId: string | number, onMessage: OnMessage, onError: OnError, options?: ReceiveOptions)'
    parameters:
    - id: partitionId
      type:
      - string | number
      description: ID di partizione da cui ricevere.
    - id: onMessage
      type:
      - '@azure/event-hubs.OnMessage'
      description: Il gestore di messaggi per ricevere gli oggetti dati di evento.
    - id: onError
      type:
      - '@azure/event-hubs.OnError'
      description: Il gestore degli errori per ricevere un errore che si verifica durante la ricezione di messaggi.
    - id: options
      type:
      - '@azure/event-hubs.ReceiveOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-hubs.ReceiveHandler'
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.receiveBatch'
  name: receiveBatch(string | number, number, undefined | number, ReceiveOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Riceve un batch di oggetti EventData da una partizione di hub eventi per un conteggio specificato e un determinato massimo tempo di attesa in secondi, a seconda di quale si verifica per primo. Questo metodo può essere utilizzato direttamente dopo la creazione dell'oggetto destinatario e **non deve** essere utilizzato con il `start()` (metodo).
  syntax:
    content: 'function receiveBatch(partitionId: string | number, maxMessageCount: number, maxWaitTimeInSeconds?: undefined | number, options?: ReceiveOptions)'
    parameters:
    - id: partitionId
      type:
      - string | number
      description: ID di partizione da cui ricevere.
    - id: maxMessageCount
      type:
      - number
      description: Il numero massimo di messaggi. Deve essere un valore maggiore di 0.
    - id: maxWaitTimeInSeconds
      type:
      - undefined | number
      description: ''
      optional: true
    - id: options
      type:
      - '@azure/event-hubs.ReceiveOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/event-hubs.EventData[]>
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.send'
  name: send(EventData, string | number)
  children: []
  type: method
  langs:
  - typeScript
  summary: Invia il messaggio all'hub eventi.
  syntax:
    content: 'function send(data: EventData, partitionId?: string | number)'
    parameters:
    - id: data
      type:
      - '@azure/event-hubs.EventData'
      description: Messaggio da inviare.  Verrà inviato come stringa JSON con codifica UTF8.
    - id: partitionId
      type:
      - string | number
      description: ''
      optional: true
    return:
      type:
      - Promise<Delivery>
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.EventHubClient.sendBatch'
  name: sendBatch(EventData[], string | number)
  children: []
  type: method
  langs:
  - typeScript
  summary: Inviare un batch di EventData all'hub eventi. Il "message_annotations", "application_properties" e "proprietà" del primo messaggio verrà impostata come che della busta (messaggio batch).
  syntax:
    content: 'function sendBatch(datas: EventData[], partitionId?: string | number)'
    parameters:
    - id: datas
      type:
      - '@azure/event-hubs.EventData[]'
      description: Una matrice di oggetti EventData da inviare in un messaggio Batch.
    - id: partitionId
      type:
      - string | number
      description: ''
      optional: true
    return:
      type:
      - Promise<Delivery>
  package: '@azure/event-hubs'
references:
- uid: '@azure/event-hubs.ClientOptions'
  name: ClientOptions
  spec.typeScript:
  - name: ClientOptions
    fullName: ClientOptions
    uid: '@azure/event-hubs.ClientOptions'
- uid: Promise<@azure/event-hubs.EventHubRuntimeInformation>
  name: EventHubRuntimeInformation>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: EventHubRuntimeInformation
    fullName: EventHubRuntimeInformation
    uid: '@azure/event-hubs.EventHubRuntimeInformation'
  - name: '>'
    fullName: '>'
- uid: Promise<@azure/event-hubs.EventHubPartitionRuntimeInformation>
  name: EventHubPartitionRuntimeInformation>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: EventHubPartitionRuntimeInformation
    fullName: EventHubPartitionRuntimeInformation
    uid: '@azure/event-hubs.EventHubPartitionRuntimeInformation'
  - name: '>'
    fullName: '>'
- uid: '@azure/event-hubs.OnMessage'
  name: OnMessage
  spec.typeScript:
  - name: OnMessage
    fullName: OnMessage
    uid: '@azure/event-hubs.OnMessage'
- uid: '@azure/event-hubs.OnError'
  name: OnError
  spec.typeScript:
  - name: OnError
    fullName: OnError
    uid: '@azure/event-hubs.OnError'
- uid: '@azure/event-hubs.ReceiveOptions'
  name: ReceiveOptions
  spec.typeScript:
  - name: ReceiveOptions
    fullName: ReceiveOptions
    uid: '@azure/event-hubs.ReceiveOptions'
- uid: '@azure/event-hubs.ReceiveHandler'
  name: ReceiveHandler
  spec.typeScript:
  - name: ReceiveHandler
    fullName: ReceiveHandler
    uid: '@azure/event-hubs.ReceiveHandler'
- uid: Promise<@azure/event-hubs.EventData[]>
  name: EventData[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: EventData
    fullName: EventData
    uid: '@azure/event-hubs.EventData'
  - name: '[]>'
    fullName: '[]>'
- uid: '@azure/event-hubs.EventData'
  name: EventData
  spec.typeScript:
  - name: EventData
    fullName: EventData
    uid: '@azure/event-hubs.EventData'
- uid: '@azure/event-hubs.EventData[]'
  name: EventData[]
  spec.typeScript:
  - name: EventData
    fullName: EventData
    uid: '@azure/event-hubs.EventData'
  - name: '[]'
    fullName: '[]'
- uid: '@azure/event-hubs.ClientOptionsBase'
  name: ClientOptionsBase
  spec.typeScript:
  - name: ClientOptionsBase
    fullName: ClientOptionsBase
    uid: '@azure/event-hubs.ClientOptionsBase'
- uid: '@azure/event-hubs.EventHubClient'
  name: EventHubClient
  spec.typeScript:
  - name: EventHubClient
    fullName: EventHubClient
    uid: '@azure/event-hubs.EventHubClient'
- uid: Promise<@azure/event-hubs.EventHubClient>
  name: EventHubClient>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: EventHubClient
    fullName: EventHubClient
    uid: '@azure/event-hubs.EventHubClient'
  - name: '>'
    fullName: '>'
