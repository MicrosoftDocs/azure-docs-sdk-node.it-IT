### YamlMime:UniversalReference
ms.openlocfilehash: 1c5d4291ffe02ac8f86bc6d6aca1109c397d9195
ms.sourcegitcommit: 8f2555cd23e454ff79e27bd3ed0a6f65b08c1c9e
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 10/10/2018
ms.locfileid: "48514789"
items:
- uid: '@azure/event-hubs.CbsClient'
  name: CbsClient
  fullName: CbsClient
  children:
  - '@azure/event-hubs.CbsClient.constructor'
  - '@azure/event-hubs.CbsClient.cbsLock'
  - '@azure/event-hubs.CbsClient.close'
  - '@azure/event-hubs.CbsClient.connection'
  - '@azure/event-hubs.CbsClient.connectionLock'
  - '@azure/event-hubs.CbsClient.endpoint'
  - '@azure/event-hubs.CbsClient.init'
  - '@azure/event-hubs.CbsClient.negotiateClaim'
  - '@azure/event-hubs.CbsClient.replyTo'
  langs:
  - typeScript
  type: class
  summary: ''
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.CbsClient.constructor'
  name: CbsClient
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new CbsClient(connection: Connection, connectionLock: string)'
    parameters:
    - id: connection
      type:
      - '@azure/event-hubs.Connection'
      description: La connessione AMQP.
    - id: connectionLock
      type:
      - string
      description: >
        Una stringa univoca (in genere un guid) per ogni connessione.
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.CbsClient.cbsLock'
  name: cbsLock
  fullName: cbsLock
  children: []
  langs:
  - typeScript
  type: property
  summary: Il nome del blocco univoco per ogni sessione $cbs per ogni connessione che consente di acquisire il blocco per stabilire una sessione di cbs, se non ne esiste una connessione aqmp cbsLock di {stringa}.
  syntax:
    content: 'cbsLock: string'
    return:
      type:
      - string
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.CbsClient.close'
  name: close
  children: []
  type: method
  langs:
  - typeScript
  summary: Chiude la sessione di cbs AMQP per l'hub eventi/bus di servizio per questo client, la restituzione di un suggerimento che viene risolto quando viene completata la disconnessione.
  syntax:
    content: function close()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.CbsClient.connection'
  name: connection
  fullName: connection
  children: []
  langs:
  - typeScript
  type: property
  summary: Connessione AMQP la connessione di {connessione}.
  syntax:
    content: 'connection: Connection'
    return:
      type:
      - '@azure/event-hubs.Connection'
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.CbsClient.connectionLock'
  name: connectionLock
  fullName: connectionLock
  children: []
  langs:
  - typeScript
  type: property
  summary: '{stringa} connectionLock il nome del blocco univoco per ogni connessione che consente di acquisire il blocco per stabilire una connessione amqp, se non esiste.'
  syntax:
    content: 'connectionLock: string'
    return:
      type:
      - string
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.CbsClient.endpoint'
  name: endpoint
  fullName: endpoint
  children: []
  langs:
  - typeScript
  type: property
  summary: 'endpoint CBS di endpoint {stringa}: "$cbs"'
  syntax:
    content: 'endpoint: string'
    return:
      type:
      - string
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.CbsClient.init'
  name: init
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea un'istanza singleton della sessione CBS se non Ã¨ stato inizializzato in precedenza per la connessione specificata.
  syntax:
    content: function init()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.CbsClient.negotiateClaim'
  name: negotiateClaim
  children: []
  type: method
  langs:
  - typeScript
  summary: Negozia l'attestazione CBS con il servizio hub eventi/bus di servizio.
  syntax:
    content: 'function negotiateClaim(audience: string, tokenObject: TokenInfo)'
    parameters:
    - id: audience
      type:
      - string
      description: Gruppo di destinatari per la quale viene richiesto il token.
    - id: tokenObject
      type:
      - '@azure/event-hubs.TokenInfo'
      description: Oggetto token deve essere inviato nella richiesta put-token.
    return:
      type:
      - Promise<any>
  package: '@azure/event-hubs'
- uid: '@azure/event-hubs.CbsClient.replyTo'
  name: replyTo
  fullName: replyTo
  children: []
  langs:
  - typeScript
  type: property
  summary: '{stringa} replyTo CBS replyTo - il nome del collegamento ricevitore che il servizio deve rispondere.'
  syntax:
    content: 'replyTo: string'
    return:
      type:
      - string
  package: '@azure/event-hubs'
references:
- uid: '@azure/event-hubs.Connection'
  name: Connection
  spec.typeScript:
  - name: Connection
    fullName: Connection
    uid: '@azure/event-hubs.Connection'
- uid: '@azure/event-hubs.TokenInfo'
  name: TokenInfo
  spec.typeScript:
  - name: TokenInfo
    fullName: TokenInfo
    uid: '@azure/event-hubs.TokenInfo'
