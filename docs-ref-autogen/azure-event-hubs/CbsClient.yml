### YamlMime:UniversalReference
ms.openlocfilehash: 5f058b840b3b1f49eafc564821547d9ba4ef7fcf
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: it-IT
ms.lasthandoff: 08/12/2018
ms.locfileid: "40069535"
items:
- uid: azure-event-hubs.CbsClient
  name: CbsClient
  fullName: CbsClient
  children:
  - azure-event-hubs.CbsClient.constructor
  - azure-event-hubs.CbsClient.cbsLock
  - azure-event-hubs.CbsClient.close
  - azure-event-hubs.CbsClient.connection
  - azure-event-hubs.CbsClient.connectionLock
  - azure-event-hubs.CbsClient.endpoint
  - azure-event-hubs.CbsClient.init
  - azure-event-hubs.CbsClient.negotiateClaim
  - azure-event-hubs.CbsClient.replyTo
  langs:
  - typeScript
  type: class
  summary: ''
  package: azure-event-hubs
- uid: azure-event-hubs.CbsClient.constructor
  name: CbsClient
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new CbsClient(connection: Connection, connectionLock: string)'
    parameters:
    - id: connection
      type:
      - azure-event-hubs.Connection
      description: ''
    - id: connectionLock
      type:
      - string
      description: ''
  package: azure-event-hubs
- uid: azure-event-hubs.CbsClient.cbsLock
  name: cbsLock
  fullName: cbsLock
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'cbsLock: string'
    return:
      type:
      - string
  package: azure-event-hubs
- uid: azure-event-hubs.CbsClient.close
  name: close
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="b949c-101">Chiude la sessione di cbs AMQP per l'hub eventi/bus di servizio per questo client, la restituzione di un suggerimento che viene risolto quando viene completata la disconnessione.</span><span class="sxs-lookup"><span data-stu-id="b949c-101">Closes the AMQP cbs session to the EventHub/ServiceBus for this client, returning a promise that will be resolved when disconnection is completed.</span></span>
  syntax:
    content: function close()
    parameters: []
    return:
      type:
      - Promise<void>
  package: azure-event-hubs
- uid: azure-event-hubs.CbsClient.connection
  name: connection
  fullName: connection
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'connection: Connection'
    return:
      type:
      - azure-event-hubs.Connection
  package: azure-event-hubs
- uid: azure-event-hubs.CbsClient.connectionLock
  name: connectionLock
  fullName: connectionLock
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'connectionLock: string'
    return:
      type:
      - string
  package: azure-event-hubs
- uid: azure-event-hubs.CbsClient.endpoint
  name: endpoint
  fullName: endpoint
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'endpoint: string'
    return:
      type:
      - string
  package: azure-event-hubs
- uid: azure-event-hubs.CbsClient.init
  name: init
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="b949c-102">Crea un'istanza singleton della sessione CBS se non Ã¨ stato inizializzato in precedenza per la connessione specificata.</span><span class="sxs-lookup"><span data-stu-id="b949c-102">Creates a singleton instance of the CBS session if it hasn't been initialized previously on the given connection.</span></span>
  syntax:
    content: function init()
    parameters: []
    return:
      type:
      - Promise<void>
  package: azure-event-hubs
- uid: azure-event-hubs.CbsClient.negotiateClaim
  name: negotiateClaim
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="b949c-103">Negozia l'attestazione CBS con il servizio hub eventi/bus di servizio.</span><span class="sxs-lookup"><span data-stu-id="b949c-103">Negotiates the CBS claim with the EventHub/ServiceBus Service.</span></span>
  syntax:
    content: 'function negotiateClaim(audience: string, tokenObject: TokenInfo)'
    parameters:
    - id: audience
      type:
      - string
      description: <span data-ttu-id="b949c-104">Gruppo di destinatari per la quale viene richiesto il token.</span><span class="sxs-lookup"><span data-stu-id="b949c-104">The audience for which the token is requested.</span></span>
    - id: tokenObject
      type:
      - azure-event-hubs.TokenInfo
      description: <span data-ttu-id="b949c-105">Oggetto token deve essere inviato nella richiesta put-token.</span><span class="sxs-lookup"><span data-stu-id="b949c-105">The token object that needs to be sent in the put-token request.</span></span>
    return:
      type:
      - Promise<any>
  package: azure-event-hubs
- uid: azure-event-hubs.CbsClient.replyTo
  name: replyTo
  fullName: replyTo
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'replyTo: string'
    return:
      type:
      - string
  package: azure-event-hubs
references:
- uid: azure-event-hubs.Connection
  spec.typeScript:
  - name: Connection
    fullName: Connection
    uid: azure-event-hubs.Connection
- uid: azure-event-hubs.TokenInfo
  spec.typeScript:
  - name: TokenInfo
    fullName: TokenInfo
    uid: azure-event-hubs.TokenInfo
